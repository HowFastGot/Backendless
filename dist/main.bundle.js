/*! For license information please see main.bundle.js.LICENSE.txt */
(()=>{"use strict";var e,t,n,r,a={364:(e,t,n)=>{n.d(t,{Z:()=>i});var r=n(537),a=n.n(r),o=n(645),l=n.n(o)()(a());l.push([e.id,'*{padding:0;margin:0;border:0}*,*:before,*:after{box-sizing:border-box}:focus,:active{outline:none}a:focus,a:active,a:visited{outline:none;color:inherit}nav,footer,header,aside{display:block}html,body,#root{height:100%;width:100%;font-family:"Roboto";font-size:100%;line-height:1;font-size:14px;-ms-text-size-adjust:100%;-moz-text-size-adjust:100%;-webkit-text-size-adjust:100%}input,button,textarea{font-family:"Roboto"}input::-ms-clear{display:none}button{cursor:pointer}button::-moz-focus-inner{padding:0;border:0}a,a:visited{text-decoration:none}a:hover{text-decoration:none}ul li{list-style:none}img{vertical-align:top}h1,h2,h3,h4,h5,h6{font-size:inherit;font-weight:inherit}.flex,header.header ul,header.header nav a,header.header nav,header.header{display:flex;justify-content:center;align-items:center}header.header{height:10%;min-height:50px;background-color:#3498db}header.header nav{height:100%;flex:0 1 5%;margin-left:30px;background-color:#2ecc71;text-align:center}header.header nav a{width:100%;height:100%;line-height:100%;color:#fff;font-size:40px;font-weight:900}header.header ul{justify-content:right;gap:2rem;width:75%;font-size:1.5rem;font-weight:500}header.header ul li{color:#fff;transition:all .3s ease 0s}header.header ul li:hover{text-decoration:underline;transform:scale(1.1)}header.header ul li a.active{color:red}main{background-color:#ecf0f1;color:#333}body{font-family:"Roboto";color:#000;font-size:16px}body._lock{overflow:hidden}.wrapper{display:flex;flex-direction:column;justify-content:center;align-items:center;height:calc(100% - 100px);width:100%}._container{max-width:1430px;margin:0 auto}',"",{version:3,sources:["webpack://./src/styles/_nullStyle.scss","webpack://./src/styles/_variables.scss","webpack://./src/styles/_header.scss","webpack://./src/styles/_main.scss","webpack://./src/styles/global.scss"],names:[],mappings:"AAGA,EACC,SAAA,CACA,QAAA,CACA,QAAA,CAGD,mBAIC,qBAAA,CAGD,eAEC,YAAA,CAGD,2BAGC,YAAA,CACA,aAAA,CAGD,wBAIC,aAAA,CAGD,gBAGC,WAAA,CACA,UAAA,CACA,oBCvCa,CDwCb,cAAA,CACA,aAAA,CACA,cAAA,CACA,yBAAA,CACA,0BAAA,CACA,6BAAA,CAGD,sBAGC,oBCnDa,CDsDd,iBACC,YAAA,CAGD,OACC,cAAA,CAGD,yBACC,SAAA,CACA,QAAA,CAGD,YAEC,oBAAA,CAGD,QACC,oBAAA,CAGD,MACC,eAAA,CAGD,IACC,kBAAA,CAGD,kBAMC,iBAAA,CACA,mBAAA,CE5FD,2EACC,YAAA,CACA,sBAAA,CACA,kBAAA,CAGD,cAEC,UAAA,CACA,eAAA,CACA,wBDaW,CCXX,kBAEC,WAAA,CACA,WAAA,CACA,gBAAA,CACA,wBDSW,CCRX,iBAAA,CAEA,oBAEC,UAAA,CACA,WAAA,CACA,gBAAA,CACA,UDLK,CCML,cAAA,CACA,eAAA,CAIF,iBAEC,qBAAA,CACA,QAAA,CAEA,SAAA,CAEA,gBAAA,CACA,eAAA,CAEA,oBACC,UDtBK,CCuBL,0BAAA,CAEA,0BACC,yBAAA,CACA,oBAAA,CAGA,6BACC,SAAA,CCnDL,KACC,wBFuBS,CEtBT,UFuBW,CGCZ,KACC,oBH1Ba,CG2Bb,UAAA,CACA,cAAA,CAEA,WACC,eAAA,CAOF,SACC,YAAA,CACA,qBAAA,CACA,sBAAA,CACA,kBAAA,CACA,yBAAA,CACA,UAAA,CAID,YACC,gBH3CmB,CG4CnB,aAAA",sourcesContent:["@import '_variables';\n//<Обнуление>===================================================================================================================================\n\n* {\n\tpadding: 0;\n\tmargin: 0;\n\tborder: 0;\n}\n\n*,\n*:before,\n*:after {\n\t-webkit-box-sizing: border-box;\n\tbox-sizing: border-box;\n}\n\n:focus,\n:active {\n\toutline: none;\n}\n\na:focus,\na:active,\na:visited {\n\toutline: none;\n\tcolor: inherit;\n}\n\nnav,\nfooter,\nheader,\naside {\n\tdisplay: block;\n}\n\nhtml,\nbody,\n#root {\n\theight: 100%;\n\twidth: 100%;\n\tfont-family: $font-family;\n\tfont-size: 100%;\n\tline-height: 1;\n\tfont-size: 14px;\n\t-ms-text-size-adjust: 100%;\n\t-moz-text-size-adjust: 100%;\n\t-webkit-text-size-adjust: 100%;\n}\n\ninput,\nbutton,\ntextarea {\n\tfont-family: $font-family;\n}\n\ninput::-ms-clear {\n\tdisplay: none;\n}\n\nbutton {\n\tcursor: pointer;\n}\n\nbutton::-moz-focus-inner {\n\tpadding: 0;\n\tborder: 0;\n}\n\na,\na:visited {\n\ttext-decoration: none;\n}\n\na:hover {\n\ttext-decoration: none;\n}\n\nul li {\n\tlist-style: none;\n}\n\nimg {\n\tvertical-align: top;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n\tfont-size: inherit;\n\tfont-weight: inherit;\n}\n//<Обнуление>====================================================================================================================================\n","//-<Шрифты по умолчанию>=================================================\r\n$font-family: 'Roboto';\r\n//-</Шрифты по умолчанию>================================================\r\n\r\n//-<ПЕРЕМЕННЫЕ>==================================================================\r\n$maxWidth: 1400px;\r\n$minWidth: 320px;\r\n$maxWidthContainer: $maxWidth + 30px;\r\n//-<ПЕРЕМЕННЫЕ>==================================================================\r\n\r\n//-<BREAKPOINTS>-================================================================\r\n$md1: $maxWidthContainer + 12;\r\n$md2: 991.98;\r\n$md3: 767.98;\r\n$md4: 479.98;\r\n//-</BREAKPOINTS>-=============================================================================\r\n\r\n//<Custom BREAKPOINTS>====================================================================================================================================\r\n\r\n//</Custom BREAKPOINTS>====================================================================================================================================\r\n$white: #ffffff;\r\n$m_blue: #3498db;\r\n$m_green: #2ecc71;\r\n$header_bg: #3498db;\r\n$main_bg: #ecf0f1;\r\n$main_text: #333333;\r\n$accent_col: #2ecc71;\r\n",".flex {\r\n\tdisplay: flex;\r\n\tjustify-content: center;\r\n\talign-items: center;\r\n}\r\n\r\nheader.header {\r\n\t@extend .flex;\r\n\theight: 10%;\r\n\tmin-height: 50px;\r\n\tbackground-color: $header_bg;\r\n\r\n\tnav {\r\n\t\t@extend .flex;\r\n\t\theight: 100%;\r\n\t\tflex: 0 1 5%;\r\n\t\tmargin-left: 30px;\r\n\t\tbackground-color: $accent_col;\r\n\t\ttext-align: center;\r\n\r\n\t\ta {\r\n\t\t\t@extend .flex;\r\n\t\t\twidth: 100%;\r\n\t\t\theight: 100%;\r\n\t\t\tline-height: 100%;\r\n\t\t\tcolor: $white;\r\n\t\t\tfont-size: 40px;\r\n\t\t\tfont-weight: 900;\r\n\t\t}\r\n\t}\r\n\r\n\tul {\r\n\t\t@extend .flex;\r\n\t\tjustify-content: right;\r\n\t\tgap: 2rem;\r\n\r\n\t\twidth: 75%;\r\n\r\n\t\tfont-size: 1.5rem;\r\n\t\tfont-weight: 500;\r\n\r\n\t\tli {\r\n\t\t\tcolor: $white;\r\n\t\t\ttransition: all 0.3s ease 0s;\r\n\r\n\t\t\t&:hover {\r\n\t\t\t\ttext-decoration: underline;\r\n\t\t\t\ttransform: scale(1.1);\r\n\t\t\t}\r\n\t\t\ta {\r\n\t\t\t\t&.active {\r\n\t\t\t\t\tcolor: red;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n","main {\r\n\tbackground-color: $main_bg;\r\n\tcolor: $main_text;\r\n}\r\n",'//<Обнуление файлов / импорт переменных>====================================================================================================================================\r\n@import \'_nullStyle\';\r\n@import \'_variables\';\r\n//<Обнуление файлов / импорт переменных>====================================================================================================================================\r\n\r\n//-<Подключаем файлы стилей>==============================================================\r\n@import \'_header\';\r\n@import \'_main\';\r\n//@import "_footer";\r\n//@import "_home";\r\n//@import "_forms";\r\n//@import "_UI";\r\n//-</Подключаем файлы стилей>==============================================================\r\n\r\n//<Подключаем шрифты>=================================================================================================\r\n//--&display=swap - оптимизация латиницы\r\n//--&subset=cyrillic-ext - оптимизация кирилици\r\n//@import "fonts"; //ипорт локально\r\n//@import url() - импорт ссылкой\r\n//</Подключаем шрифты>=================================================================================================\r\n\r\n//-<Иконочные шрифты>-==============================================================\r\n//@import ""; //скомпилированный фал был добавлен в папку после скачивания и удаления лишего\r\n//-</Иконочные шрифты>-==============================================================\r\n\r\n//-<Обнуление общиих параметров>-===================================================\r\nbody {\r\n\tfont-family: $font-family;\r\n\tcolor: #000;\r\n\tfont-size: 16px;\r\n\r\n\t&._lock {\r\n\t\toverflow: hidden;\r\n\t}\r\n}\r\n\r\n//-<Обнуление общих параметров>-===================================================\r\n\r\n//<Wrapper и Ограничивающий контейнер>-========================================================================\r\n.wrapper {\r\n\tdisplay: flex;\r\n\tflex-direction: column;\r\n\tjustify-content: center;\r\n\talign-items: center;\r\n\theight: calc(100% - 100px);\r\n\twidth: 100%;\r\n}\r\n\r\n//---------------------------------------\r\n._container {\r\n\tmax-width: $maxWidthContainer;\r\n\tmargin: 0 auto;\r\n}\r\n//</Wrapper и Ограничивающий контейнер>========================================================================\r\n\r\n//-<Основная сетка>==================================================================\r\n.page {\r\n}\r\n\r\n//-<Основная сетка>==================================================================\r\n'],sourceRoot:""}]);const i=l},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,a,o){"string"==typeof e&&(e=[[null,e,void 0]]);var l={};if(r)for(var i=0;i<this.length;i++){var u=this[i][0];null!=u&&(l[u]=!0)}for(var s=0;s<e.length;s++){var c=[].concat(e[s]);r&&l[c[0]]||(void 0!==o&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=o),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),a&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=a):c[4]="".concat(a)),t.push(c))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */");return[t].concat([o]).join("\n")}return[t].join("\n")}},448:(e,t,n)=>{var r=n(294),a=n(840);function o(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var l=new Set,i={};function u(e,t){s(e,t),s(e+"Capture",t)}function s(e,t){for(i[e]=t,e=0;e<t.length;e++)l.add(t[e])}var c=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),f=Object.prototype.hasOwnProperty,d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p={},h={};function m(e,t,n,r,a,o,l){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=a,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=o,this.removeEmptyString=l}var v={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){v[e]=new m(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];v[t]=new m(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){v[e]=new m(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){v[e]=new m(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){v[e]=new m(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){v[e]=new m(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){v[e]=new m(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){v[e]=new m(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){v[e]=new m(e,5,!1,e.toLowerCase(),null,!1,!1)}));var g=/[\-:]([a-z])/g;function y(e){return e[1].toUpperCase()}function b(e,t,n,r){var a=v.hasOwnProperty(t)?v[t]:null;(null!==a?0!==a.type:r||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,a,r)&&(n=null),r||null===a?function(e){return!!f.call(h,e)||!f.call(p,e)&&(d.test(e)?h[e]=!0:(p[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):a.mustUseProperty?e[a.propertyName]=null===n?3!==a.type&&"":n:(t=a.attributeName,r=a.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(a=a.type)||4===a&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(g,y);v[t]=new m(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(g,y);v[t]=new m(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(g,y);v[t]=new m(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){v[e]=new m(e,1,!1,e.toLowerCase(),null,!1,!1)})),v.xlinkHref=new m("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){v[e]=new m(e,1,!1,e.toLowerCase(),null,!0,!0)}));var w=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,k=Symbol.for("react.element"),S=Symbol.for("react.portal"),x=Symbol.for("react.fragment"),C=Symbol.for("react.strict_mode"),E=Symbol.for("react.profiler"),A=Symbol.for("react.provider"),_=Symbol.for("react.context"),P=Symbol.for("react.forward_ref"),L=Symbol.for("react.suspense"),T=Symbol.for("react.suspense_list"),R=Symbol.for("react.memo"),D=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var z=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var N=Symbol.iterator;function M(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=N&&e[N]||e["@@iterator"])?e:null}var O,j=Object.assign;function U(e){if(void 0===O)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);O=t&&t[1]||""}return"\n"+O+e}var F=!1;function I(e,t){if(!e||F)return"";F=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(t){if(t&&r&&"string"==typeof t.stack){for(var a=t.stack.split("\n"),o=r.stack.split("\n"),l=a.length-1,i=o.length-1;1<=l&&0<=i&&a[l]!==o[i];)i--;for(;1<=l&&0<=i;l--,i--)if(a[l]!==o[i]){if(1!==l||1!==i)do{if(l--,0>--i||a[l]!==o[i]){var u="\n"+a[l].replace(" at new "," at ");return e.displayName&&u.includes("<anonymous>")&&(u=u.replace("<anonymous>",e.displayName)),u}}while(1<=l&&0<=i);break}}}finally{F=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?U(e):""}function B(e){switch(e.tag){case 5:return U(e.type);case 16:return U("Lazy");case 13:return U("Suspense");case 19:return U("SuspenseList");case 0:case 2:case 15:return I(e.type,!1);case 11:return I(e.type.render,!1);case 1:return I(e.type,!0);default:return""}}function $(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case x:return"Fragment";case S:return"Portal";case E:return"Profiler";case C:return"StrictMode";case L:return"Suspense";case T:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case _:return(e.displayName||"Context")+".Consumer";case A:return(e._context.displayName||"Context")+".Provider";case P:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case R:return null!==(t=e.displayName||null)?t:$(e.type)||"Memo";case D:t=e._payload,e=e._init;try{return $(e(t))}catch(e){}}return null}function W(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return $(t);case 8:return t===C?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function V(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function H(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Q(e){e._valueTracker||(e._valueTracker=function(e){var t=H(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var a=n.get,o=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return a.call(this)},set:function(e){r=""+e,o.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function q(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=H(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function K(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Y(e,t){var n=t.checked;return j({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function G(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=V(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function X(e,t){null!=(t=t.checked)&&b(e,"checked",t,!1)}function J(e,t){X(e,t);var n=V(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,n):t.hasOwnProperty("defaultValue")&&ee(e,t.type,V(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Z(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ee(e,t,n){"number"===t&&K(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var te=Array.isArray;function ne(e,t,n,r){if(e=e.options,t){t={};for(var a=0;a<n.length;a++)t["$"+n[a]]=!0;for(n=0;n<e.length;n++)a=t.hasOwnProperty("$"+e[n].value),e[n].selected!==a&&(e[n].selected=a),a&&r&&(e[n].defaultSelected=!0)}else{for(n=""+V(n),t=null,a=0;a<e.length;a++){if(e[a].value===n)return e[a].selected=!0,void(r&&(e[a].defaultSelected=!0));null!==t||e[a].disabled||(t=e[a])}null!==t&&(t.selected=!0)}}function re(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(o(91));return j({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ae(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(o(92));if(te(n)){if(1<n.length)throw Error(o(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:V(n)}}function oe(e,t){var n=V(t.value),r=V(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function le(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function ie(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function ue(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?ie(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var se,ce,fe=(ce=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((se=se||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=se.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return ce(e,t)}))}:ce);function de(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var pe={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},he=["Webkit","ms","Moz","O"];function me(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||pe.hasOwnProperty(e)&&pe[e]?(""+t).trim():t+"px"}function ve(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),a=me(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,a):e[n]=a}}Object.keys(pe).forEach((function(e){he.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),pe[t]=pe[e]}))}));var ge=j({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ye(e,t){if(t){if(ge[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(o(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(o(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(o(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(o(62))}}function be(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var we=null;function ke(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Se=null,xe=null,Ce=null;function Ee(e){if(e=ba(e)){if("function"!=typeof Se)throw Error(o(280));var t=e.stateNode;t&&(t=ka(t),Se(e.stateNode,e.type,t))}}function Ae(e){xe?Ce?Ce.push(e):Ce=[e]:xe=e}function _e(){if(xe){var e=xe,t=Ce;if(Ce=xe=null,Ee(e),t)for(e=0;e<t.length;e++)Ee(t[e])}}function Pe(e,t){return e(t)}function Le(){}var Te=!1;function Re(e,t,n){if(Te)return e(t,n);Te=!0;try{return Pe(e,t,n)}finally{Te=!1,(null!==xe||null!==Ce)&&(Le(),_e())}}function De(e,t){var n=e.stateNode;if(null===n)return null;var r=ka(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(o(231,t,typeof n));return n}var ze=!1;if(c)try{var Ne={};Object.defineProperty(Ne,"passive",{get:function(){ze=!0}}),window.addEventListener("test",Ne,Ne),window.removeEventListener("test",Ne,Ne)}catch(ce){ze=!1}function Me(e,t,n,r,a,o,l,i,u){var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this.onError(e)}}var Oe=!1,je=null,Ue=!1,Fe=null,Ie={onError:function(e){Oe=!0,je=e}};function Be(e,t,n,r,a,o,l,i,u){Oe=!1,je=null,Me.apply(Ie,arguments)}function $e(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function We(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Ve(e){if($e(e)!==e)throw Error(o(188))}function He(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=$e(e)))throw Error(o(188));return t!==e?null:e}for(var n=e,r=t;;){var a=n.return;if(null===a)break;var l=a.alternate;if(null===l){if(null!==(r=a.return)){n=r;continue}break}if(a.child===l.child){for(l=a.child;l;){if(l===n)return Ve(a),e;if(l===r)return Ve(a),t;l=l.sibling}throw Error(o(188))}if(n.return!==r.return)n=a,r=l;else{for(var i=!1,u=a.child;u;){if(u===n){i=!0,n=a,r=l;break}if(u===r){i=!0,r=a,n=l;break}u=u.sibling}if(!i){for(u=l.child;u;){if(u===n){i=!0,n=l,r=a;break}if(u===r){i=!0,r=l,n=a;break}u=u.sibling}if(!i)throw Error(o(189))}}if(n.alternate!==r)throw Error(o(190))}if(3!==n.tag)throw Error(o(188));return n.stateNode.current===n?e:t}(e))?Qe(e):null}function Qe(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=Qe(e);if(null!==t)return t;e=e.sibling}return null}var qe=a.unstable_scheduleCallback,Ke=a.unstable_cancelCallback,Ye=a.unstable_shouldYield,Ge=a.unstable_requestPaint,Xe=a.unstable_now,Je=a.unstable_getCurrentPriorityLevel,Ze=a.unstable_ImmediatePriority,et=a.unstable_UserBlockingPriority,tt=a.unstable_NormalPriority,nt=a.unstable_LowPriority,rt=a.unstable_IdlePriority,at=null,ot=null,lt=Math.clz32?Math.clz32:function(e){return 0===(e>>>=0)?32:31-(it(e)/ut|0)|0},it=Math.log,ut=Math.LN2,st=64,ct=4194304;function ft(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function dt(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,a=e.suspendedLanes,o=e.pingedLanes,l=268435455&n;if(0!==l){var i=l&~a;0!==i?r=ft(i):0!=(o&=l)&&(r=ft(o))}else 0!=(l=n&~a)?r=ft(l):0!==o&&(r=ft(o));if(0===r)return 0;if(0!==t&&t!==r&&0==(t&a)&&((a=r&-r)>=(o=t&-t)||16===a&&0!=(4194240&o)))return t;if(0!=(4&r)&&(r|=16&n),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)a=1<<(n=31-lt(t)),r|=e[n],t&=~a;return r}function pt(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function ht(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function mt(){var e=st;return 0==(4194240&(st<<=1))&&(st=64),e}function vt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function gt(e,t,n){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-lt(t)]=n}function yt(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-lt(n),a=1<<r;a&t|e[r]&t&&(e[r]|=t),n&=~a}}var bt=0;function wt(e){return 1<(e&=-e)?4<e?0!=(268435455&e)?16:536870912:4:1}var kt,St,xt,Ct,Et,At=!1,_t=[],Pt=null,Lt=null,Tt=null,Rt=new Map,Dt=new Map,zt=[],Nt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Mt(e,t){switch(e){case"focusin":case"focusout":Pt=null;break;case"dragenter":case"dragleave":Lt=null;break;case"mouseover":case"mouseout":Tt=null;break;case"pointerover":case"pointerout":Rt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Dt.delete(t.pointerId)}}function Ot(e,t,n,r,a,o){return null===e||e.nativeEvent!==o?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:o,targetContainers:[a]},null!==t&&null!==(t=ba(t))&&St(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==a&&-1===t.indexOf(a)&&t.push(a),e)}function jt(e){var t=ya(e.target);if(null!==t){var n=$e(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=We(n)))return e.blockedOn=t,void Et(e.priority,(function(){xt(n)}))}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Ut(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Yt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=ba(n))&&St(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);we=r,n.target.dispatchEvent(r),we=null,t.shift()}return!0}function Ft(e,t,n){Ut(e)&&n.delete(t)}function It(){At=!1,null!==Pt&&Ut(Pt)&&(Pt=null),null!==Lt&&Ut(Lt)&&(Lt=null),null!==Tt&&Ut(Tt)&&(Tt=null),Rt.forEach(Ft),Dt.forEach(Ft)}function Bt(e,t){e.blockedOn===t&&(e.blockedOn=null,At||(At=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,It)))}function $t(e){function t(t){return Bt(t,e)}if(0<_t.length){Bt(_t[0],e);for(var n=1;n<_t.length;n++){var r=_t[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==Pt&&Bt(Pt,e),null!==Lt&&Bt(Lt,e),null!==Tt&&Bt(Tt,e),Rt.forEach(t),Dt.forEach(t),n=0;n<zt.length;n++)(r=zt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<zt.length&&null===(n=zt[0]).blockedOn;)jt(n),null===n.blockedOn&&zt.shift()}var Wt=w.ReactCurrentBatchConfig,Vt=!0;function Ht(e,t,n,r){var a=bt,o=Wt.transition;Wt.transition=null;try{bt=1,qt(e,t,n,r)}finally{bt=a,Wt.transition=o}}function Qt(e,t,n,r){var a=bt,o=Wt.transition;Wt.transition=null;try{bt=4,qt(e,t,n,r)}finally{bt=a,Wt.transition=o}}function qt(e,t,n,r){if(Vt){var a=Yt(e,t,n,r);if(null===a)Vr(e,t,r,Kt,n),Mt(e,r);else if(function(e,t,n,r,a){switch(t){case"focusin":return Pt=Ot(Pt,e,t,n,r,a),!0;case"dragenter":return Lt=Ot(Lt,e,t,n,r,a),!0;case"mouseover":return Tt=Ot(Tt,e,t,n,r,a),!0;case"pointerover":var o=a.pointerId;return Rt.set(o,Ot(Rt.get(o)||null,e,t,n,r,a)),!0;case"gotpointercapture":return o=a.pointerId,Dt.set(o,Ot(Dt.get(o)||null,e,t,n,r,a)),!0}return!1}(a,e,t,n,r))r.stopPropagation();else if(Mt(e,r),4&t&&-1<Nt.indexOf(e)){for(;null!==a;){var o=ba(a);if(null!==o&&kt(o),null===(o=Yt(e,t,n,r))&&Vr(e,t,r,Kt,n),o===a)break;a=o}null!==a&&r.stopPropagation()}else Vr(e,t,r,null,n)}}var Kt=null;function Yt(e,t,n,r){if(Kt=null,null!==(e=ya(e=ke(r))))if(null===(t=$e(e)))e=null;else if(13===(n=t.tag)){if(null!==(e=We(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return Kt=e,null}function Gt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Je()){case Ze:return 1;case et:return 4;case tt:case nt:return 16;case rt:return 536870912;default:return 16}default:return 16}}var Xt=null,Jt=null,Zt=null;function en(){if(Zt)return Zt;var e,t,n=Jt,r=n.length,a="value"in Xt?Xt.value:Xt.textContent,o=a.length;for(e=0;e<r&&n[e]===a[e];e++);var l=r-e;for(t=1;t<=l&&n[r-t]===a[o-t];t++);return Zt=a.slice(e,1<t?1-t:void 0)}function tn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function nn(){return!0}function rn(){return!1}function an(e){function t(t,n,r,a,o){for(var l in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=a,this.target=o,this.currentTarget=null,e)e.hasOwnProperty(l)&&(t=e[l],this[l]=t?t(a):a[l]);return this.isDefaultPrevented=(null!=a.defaultPrevented?a.defaultPrevented:!1===a.returnValue)?nn:rn,this.isPropagationStopped=rn,this}return j(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=nn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=nn)},persist:function(){},isPersistent:nn}),t}var on,ln,un,sn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},cn=an(sn),fn=j({},sn,{view:0,detail:0}),dn=an(fn),pn=j({},fn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:En,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==un&&(un&&"mousemove"===e.type?(on=e.screenX-un.screenX,ln=e.screenY-un.screenY):ln=on=0,un=e),on)},movementY:function(e){return"movementY"in e?e.movementY:ln}}),hn=an(pn),mn=an(j({},pn,{dataTransfer:0})),vn=an(j({},fn,{relatedTarget:0})),gn=an(j({},sn,{animationName:0,elapsedTime:0,pseudoElement:0})),yn=j({},sn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),bn=an(yn),wn=an(j({},sn,{data:0})),kn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Sn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},xn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Cn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=xn[e])&&!!t[e]}function En(){return Cn}var An=j({},fn,{key:function(e){if(e.key){var t=kn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=tn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Sn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:En,charCode:function(e){return"keypress"===e.type?tn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),_n=an(An),Pn=an(j({},pn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Ln=an(j({},fn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:En})),Tn=an(j({},sn,{propertyName:0,elapsedTime:0,pseudoElement:0})),Rn=j({},pn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Dn=an(Rn),zn=[9,13,27,32],Nn=c&&"CompositionEvent"in window,Mn=null;c&&"documentMode"in document&&(Mn=document.documentMode);var On=c&&"TextEvent"in window&&!Mn,jn=c&&(!Nn||Mn&&8<Mn&&11>=Mn),Un=String.fromCharCode(32),Fn=!1;function In(e,t){switch(e){case"keyup":return-1!==zn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Bn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var $n=!1,Wn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Vn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Wn[e.type]:"textarea"===t}function Hn(e,t,n,r){Ae(r),0<(t=Qr(t,"onChange")).length&&(n=new cn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Qn=null,qn=null;function Kn(e){Ur(e,0)}function Yn(e){if(q(wa(e)))return e}function Gn(e,t){if("change"===e)return t}var Xn=!1;if(c){var Jn;if(c){var Zn="oninput"in document;if(!Zn){var er=document.createElement("div");er.setAttribute("oninput","return;"),Zn="function"==typeof er.oninput}Jn=Zn}else Jn=!1;Xn=Jn&&(!document.documentMode||9<document.documentMode)}function tr(){Qn&&(Qn.detachEvent("onpropertychange",nr),qn=Qn=null)}function nr(e){if("value"===e.propertyName&&Yn(qn)){var t=[];Hn(t,qn,e,ke(e)),Re(Kn,t)}}function rr(e,t,n){"focusin"===e?(tr(),qn=n,(Qn=t).attachEvent("onpropertychange",nr)):"focusout"===e&&tr()}function ar(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Yn(qn)}function or(e,t){if("click"===e)return Yn(t)}function lr(e,t){if("input"===e||"change"===e)return Yn(t)}var ir="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function ur(e,t){if(ir(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var a=n[r];if(!f.call(t,a)||!ir(e[a],t[a]))return!1}return!0}function sr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function cr(e,t){var n,r=sr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=sr(r)}}function fr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?fr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function dr(){for(var e=window,t=K();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=K((e=t.contentWindow).document)}return t}function pr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function hr(e){var t=dr(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&fr(n.ownerDocument.documentElement,n)){if(null!==r&&pr(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var a=n.textContent.length,o=Math.min(r.start,a);r=void 0===r.end?o:Math.min(r.end,a),!e.extend&&o>r&&(a=r,r=o,o=a),a=cr(n,o);var l=cr(n,r);a&&l&&(1!==e.rangeCount||e.anchorNode!==a.node||e.anchorOffset!==a.offset||e.focusNode!==l.node||e.focusOffset!==l.offset)&&((t=t.createRange()).setStart(a.node,a.offset),e.removeAllRanges(),o>r?(e.addRange(t),e.extend(l.node,l.offset)):(t.setEnd(l.node,l.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var mr=c&&"documentMode"in document&&11>=document.documentMode,vr=null,gr=null,yr=null,br=!1;function wr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;br||null==vr||vr!==K(r)||(r="selectionStart"in(r=vr)&&pr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},yr&&ur(yr,r)||(yr=r,0<(r=Qr(gr,"onSelect")).length&&(t=new cn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=vr)))}function kr(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Sr={animationend:kr("Animation","AnimationEnd"),animationiteration:kr("Animation","AnimationIteration"),animationstart:kr("Animation","AnimationStart"),transitionend:kr("Transition","TransitionEnd")},xr={},Cr={};function Er(e){if(xr[e])return xr[e];if(!Sr[e])return e;var t,n=Sr[e];for(t in n)if(n.hasOwnProperty(t)&&t in Cr)return xr[e]=n[t];return e}c&&(Cr=document.createElement("div").style,"AnimationEvent"in window||(delete Sr.animationend.animation,delete Sr.animationiteration.animation,delete Sr.animationstart.animation),"TransitionEvent"in window||delete Sr.transitionend.transition);var Ar=Er("animationend"),_r=Er("animationiteration"),Pr=Er("animationstart"),Lr=Er("transitionend"),Tr=new Map,Rr="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Dr(e,t){Tr.set(e,t),u(t,[e])}for(var zr=0;zr<Rr.length;zr++){var Nr=Rr[zr];Dr(Nr.toLowerCase(),"on"+(Nr[0].toUpperCase()+Nr.slice(1)))}Dr(Ar,"onAnimationEnd"),Dr(_r,"onAnimationIteration"),Dr(Pr,"onAnimationStart"),Dr("dblclick","onDoubleClick"),Dr("focusin","onFocus"),Dr("focusout","onBlur"),Dr(Lr,"onTransitionEnd"),s("onMouseEnter",["mouseout","mouseover"]),s("onMouseLeave",["mouseout","mouseover"]),s("onPointerEnter",["pointerout","pointerover"]),s("onPointerLeave",["pointerout","pointerover"]),u("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),u("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),u("onBeforeInput",["compositionend","keypress","textInput","paste"]),u("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Mr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Or=new Set("cancel close invalid load scroll toggle".split(" ").concat(Mr));function jr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,a,l,i,u,s){if(Be.apply(this,arguments),Oe){if(!Oe)throw Error(o(198));var c=je;Oe=!1,je=null,Ue||(Ue=!0,Fe=c)}}(r,t,void 0,e),e.currentTarget=null}function Ur(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],a=r.event;r=r.listeners;e:{var o=void 0;if(t)for(var l=r.length-1;0<=l;l--){var i=r[l],u=i.instance,s=i.currentTarget;if(i=i.listener,u!==o&&a.isPropagationStopped())break e;jr(a,i,s),o=u}else for(l=0;l<r.length;l++){if(u=(i=r[l]).instance,s=i.currentTarget,i=i.listener,u!==o&&a.isPropagationStopped())break e;jr(a,i,s),o=u}}}if(Ue)throw e=Fe,Ue=!1,Fe=null,e}function Fr(e,t){var n=t[ma];void 0===n&&(n=t[ma]=new Set);var r=e+"__bubble";n.has(r)||(Wr(t,e,2,!1),n.add(r))}function Ir(e,t,n){var r=0;t&&(r|=4),Wr(n,e,r,t)}var Br="_reactListening"+Math.random().toString(36).slice(2);function $r(e){if(!e[Br]){e[Br]=!0,l.forEach((function(t){"selectionchange"!==t&&(Or.has(t)||Ir(t,!1,e),Ir(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[Br]||(t[Br]=!0,Ir("selectionchange",!1,t))}}function Wr(e,t,n,r){switch(Gt(t)){case 1:var a=Ht;break;case 4:a=Qt;break;default:a=qt}n=a.bind(null,t,n,e),a=void 0,!ze||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(a=!0),r?void 0!==a?e.addEventListener(t,n,{capture:!0,passive:a}):e.addEventListener(t,n,!0):void 0!==a?e.addEventListener(t,n,{passive:a}):e.addEventListener(t,n,!1)}function Vr(e,t,n,r,a){var o=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var l=r.tag;if(3===l||4===l){var i=r.stateNode.containerInfo;if(i===a||8===i.nodeType&&i.parentNode===a)break;if(4===l)for(l=r.return;null!==l;){var u=l.tag;if((3===u||4===u)&&((u=l.stateNode.containerInfo)===a||8===u.nodeType&&u.parentNode===a))return;l=l.return}for(;null!==i;){if(null===(l=ya(i)))return;if(5===(u=l.tag)||6===u){r=o=l;continue e}i=i.parentNode}}r=r.return}Re((function(){var r=o,a=ke(n),l=[];e:{var i=Tr.get(e);if(void 0!==i){var u=cn,s=e;switch(e){case"keypress":if(0===tn(n))break e;case"keydown":case"keyup":u=_n;break;case"focusin":s="focus",u=vn;break;case"focusout":s="blur",u=vn;break;case"beforeblur":case"afterblur":u=vn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=hn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=mn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=Ln;break;case Ar:case _r:case Pr:u=gn;break;case Lr:u=Tn;break;case"scroll":u=dn;break;case"wheel":u=Dn;break;case"copy":case"cut":case"paste":u=bn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=Pn}var c=0!=(4&t),f=!c&&"scroll"===e,d=c?null!==i?i+"Capture":null:i;c=[];for(var p,h=r;null!==h;){var m=(p=h).stateNode;if(5===p.tag&&null!==m&&(p=m,null!==d&&null!=(m=De(h,d))&&c.push(Hr(h,m,p))),f)break;h=h.return}0<c.length&&(i=new u(i,s,null,n,a),l.push({event:i,listeners:c}))}}if(0==(7&t)){if(u="mouseout"===e||"pointerout"===e,(!(i="mouseover"===e||"pointerover"===e)||n===we||!(s=n.relatedTarget||n.fromElement)||!ya(s)&&!s[ha])&&(u||i)&&(i=a.window===a?a:(i=a.ownerDocument)?i.defaultView||i.parentWindow:window,u?(u=r,null!==(s=(s=n.relatedTarget||n.toElement)?ya(s):null)&&(s!==(f=$e(s))||5!==s.tag&&6!==s.tag)&&(s=null)):(u=null,s=r),u!==s)){if(c=hn,m="onMouseLeave",d="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=Pn,m="onPointerLeave",d="onPointerEnter",h="pointer"),f=null==u?i:wa(u),p=null==s?i:wa(s),(i=new c(m,h+"leave",u,n,a)).target=f,i.relatedTarget=p,m=null,ya(a)===r&&((c=new c(d,h+"enter",s,n,a)).target=p,c.relatedTarget=f,m=c),f=m,u&&s)e:{for(d=s,h=0,p=c=u;p;p=qr(p))h++;for(p=0,m=d;m;m=qr(m))p++;for(;0<h-p;)c=qr(c),h--;for(;0<p-h;)d=qr(d),p--;for(;h--;){if(c===d||null!==d&&c===d.alternate)break e;c=qr(c),d=qr(d)}c=null}else c=null;null!==u&&Kr(l,i,u,c,!1),null!==s&&null!==f&&Kr(l,f,s,c,!0)}if("select"===(u=(i=r?wa(r):window).nodeName&&i.nodeName.toLowerCase())||"input"===u&&"file"===i.type)var v=Gn;else if(Vn(i))if(Xn)v=lr;else{v=ar;var g=rr}else(u=i.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===i.type||"radio"===i.type)&&(v=or);switch(v&&(v=v(e,r))?Hn(l,v,n,a):(g&&g(e,i,r),"focusout"===e&&(g=i._wrapperState)&&g.controlled&&"number"===i.type&&ee(i,"number",i.value)),g=r?wa(r):window,e){case"focusin":(Vn(g)||"true"===g.contentEditable)&&(vr=g,gr=r,yr=null);break;case"focusout":yr=gr=vr=null;break;case"mousedown":br=!0;break;case"contextmenu":case"mouseup":case"dragend":br=!1,wr(l,n,a);break;case"selectionchange":if(mr)break;case"keydown":case"keyup":wr(l,n,a)}var y;if(Nn)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else $n?In(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(jn&&"ko"!==n.locale&&($n||"onCompositionStart"!==b?"onCompositionEnd"===b&&$n&&(y=en()):(Jt="value"in(Xt=a)?Xt.value:Xt.textContent,$n=!0)),0<(g=Qr(r,b)).length&&(b=new wn(b,e,null,n,a),l.push({event:b,listeners:g}),(y||null!==(y=Bn(n)))&&(b.data=y))),(y=On?function(e,t){switch(e){case"compositionend":return Bn(t);case"keypress":return 32!==t.which?null:(Fn=!0,Un);case"textInput":return(e=t.data)===Un&&Fn?null:e;default:return null}}(e,n):function(e,t){if($n)return"compositionend"===e||!Nn&&In(e,t)?(e=en(),Zt=Jt=Xt=null,$n=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return jn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=Qr(r,"onBeforeInput")).length&&(a=new wn("onBeforeInput","beforeinput",null,n,a),l.push({event:a,listeners:r}),a.data=y)}Ur(l,t)}))}function Hr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Qr(e,t){for(var n=t+"Capture",r=[];null!==e;){var a=e,o=a.stateNode;5===a.tag&&null!==o&&(a=o,null!=(o=De(e,n))&&r.unshift(Hr(e,o,a)),null!=(o=De(e,t))&&r.push(Hr(e,o,a))),e=e.return}return r}function qr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Kr(e,t,n,r,a){for(var o=t._reactName,l=[];null!==n&&n!==r;){var i=n,u=i.alternate,s=i.stateNode;if(null!==u&&u===r)break;5===i.tag&&null!==s&&(i=s,a?null!=(u=De(n,o))&&l.unshift(Hr(n,u,i)):a||null!=(u=De(n,o))&&l.push(Hr(n,u,i))),n=n.return}0!==l.length&&e.push({event:t,listeners:l})}var Yr=/\r\n?/g,Gr=/\u0000|\uFFFD/g;function Xr(e){return("string"==typeof e?e:""+e).replace(Yr,"\n").replace(Gr,"")}function Jr(e,t,n){if(t=Xr(t),Xr(e)!==t&&n)throw Error(o(425))}function Zr(){}var ea=null,ta=null;function na(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var ra="function"==typeof setTimeout?setTimeout:void 0,aa="function"==typeof clearTimeout?clearTimeout:void 0,oa="function"==typeof Promise?Promise:void 0,la="function"==typeof queueMicrotask?queueMicrotask:void 0!==oa?function(e){return oa.resolve(null).then(e).catch(ia)}:ra;function ia(e){setTimeout((function(){throw e}))}function ua(e,t){var n=t,r=0;do{var a=n.nextSibling;if(e.removeChild(n),a&&8===a.nodeType)if("/$"===(n=a.data)){if(0===r)return e.removeChild(a),void $t(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=a}while(n);$t(t)}function sa(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function ca(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var fa=Math.random().toString(36).slice(2),da="__reactFiber$"+fa,pa="__reactProps$"+fa,ha="__reactContainer$"+fa,ma="__reactEvents$"+fa,va="__reactListeners$"+fa,ga="__reactHandles$"+fa;function ya(e){var t=e[da];if(t)return t;for(var n=e.parentNode;n;){if(t=n[ha]||n[da]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=ca(e);null!==e;){if(n=e[da])return n;e=ca(e)}return t}n=(e=n).parentNode}return null}function ba(e){return!(e=e[da]||e[ha])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function wa(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(o(33))}function ka(e){return e[pa]||null}var Sa=[],xa=-1;function Ca(e){return{current:e}}function Ea(e){0>xa||(e.current=Sa[xa],Sa[xa]=null,xa--)}function Aa(e,t){xa++,Sa[xa]=e.current,e.current=t}var _a={},Pa=Ca(_a),La=Ca(!1),Ta=_a;function Ra(e,t){var n=e.type.contextTypes;if(!n)return _a;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var a,o={};for(a in n)o[a]=t[a];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=o),o}function Da(e){return null!=e.childContextTypes}function za(){Ea(La),Ea(Pa)}function Na(e,t,n){if(Pa.current!==_a)throw Error(o(168));Aa(Pa,t),Aa(La,n)}function Ma(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var a in r=r.getChildContext())if(!(a in t))throw Error(o(108,W(e)||"Unknown",a));return j({},n,r)}function Oa(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||_a,Ta=Pa.current,Aa(Pa,e),Aa(La,La.current),!0}function ja(e,t,n){var r=e.stateNode;if(!r)throw Error(o(169));n?(e=Ma(e,t,Ta),r.__reactInternalMemoizedMergedChildContext=e,Ea(La),Ea(Pa),Aa(Pa,e)):Ea(La),Aa(La,n)}var Ua=null,Fa=!1,Ia=!1;function Ba(e){null===Ua?Ua=[e]:Ua.push(e)}function $a(){if(!Ia&&null!==Ua){Ia=!0;var e=0,t=bt;try{var n=Ua;for(bt=1;e<n.length;e++){var r=n[e];do{r=r(!0)}while(null!==r)}Ua=null,Fa=!1}catch(t){throw null!==Ua&&(Ua=Ua.slice(e+1)),qe(Ze,$a),t}finally{bt=t,Ia=!1}}return null}var Wa=[],Va=0,Ha=null,Qa=0,qa=[],Ka=0,Ya=null,Ga=1,Xa="";function Ja(e,t){Wa[Va++]=Qa,Wa[Va++]=Ha,Ha=e,Qa=t}function Za(e,t,n){qa[Ka++]=Ga,qa[Ka++]=Xa,qa[Ka++]=Ya,Ya=e;var r=Ga;e=Xa;var a=32-lt(r)-1;r&=~(1<<a),n+=1;var o=32-lt(t)+a;if(30<o){var l=a-a%5;o=(r&(1<<l)-1).toString(32),r>>=l,a-=l,Ga=1<<32-lt(t)+a|n<<a|r,Xa=o+e}else Ga=1<<o|n<<a|r,Xa=e}function eo(e){null!==e.return&&(Ja(e,1),Za(e,1,0))}function to(e){for(;e===Ha;)Ha=Wa[--Va],Wa[Va]=null,Qa=Wa[--Va],Wa[Va]=null;for(;e===Ya;)Ya=qa[--Ka],qa[Ka]=null,Xa=qa[--Ka],qa[Ka]=null,Ga=qa[--Ka],qa[Ka]=null}var no=null,ro=null,ao=!1,oo=null;function lo(e,t){var n=Ds(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)}function io(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,no=e,ro=sa(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,no=e,ro=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(n=null!==Ya?{id:Ga,overflow:Xa}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},(n=Ds(18,null,null,0)).stateNode=t,n.return=e,e.child=n,no=e,ro=null,!0);default:return!1}}function uo(e){return 0!=(1&e.mode)&&0==(128&e.flags)}function so(e){if(ao){var t=ro;if(t){var n=t;if(!io(e,t)){if(uo(e))throw Error(o(418));t=sa(n.nextSibling);var r=no;t&&io(e,t)?lo(r,n):(e.flags=-4097&e.flags|2,ao=!1,no=e)}}else{if(uo(e))throw Error(o(418));e.flags=-4097&e.flags|2,ao=!1,no=e}}}function co(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;no=e}function fo(e){if(e!==no)return!1;if(!ao)return co(e),ao=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!na(e.type,e.memoizedProps)),t&&(t=ro)){if(uo(e))throw po(),Error(o(418));for(;t;)lo(e,t),t=sa(t.nextSibling)}if(co(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(o(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){ro=sa(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}ro=null}}else ro=no?sa(e.stateNode.nextSibling):null;return!0}function po(){for(var e=ro;e;)e=sa(e.nextSibling)}function ho(){ro=no=null,ao=!1}function mo(e){null===oo?oo=[e]:oo.push(e)}var vo=w.ReactCurrentBatchConfig;function go(e,t){if(e&&e.defaultProps){for(var n in t=j({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var yo=Ca(null),bo=null,wo=null,ko=null;function So(){ko=wo=bo=null}function xo(e){var t=yo.current;Ea(yo),e._currentValue=t}function Co(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function Eo(e,t){bo=e,ko=wo=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(wi=!0),e.firstContext=null)}function Ao(e){var t=e._currentValue;if(ko!==e)if(e={context:e,memoizedValue:t,next:null},null===wo){if(null===bo)throw Error(o(308));wo=e,bo.dependencies={lanes:0,firstContext:e}}else wo=wo.next=e;return t}var _o=null;function Po(e){null===_o?_o=[e]:_o.push(e)}function Lo(e,t,n,r){var a=t.interleaved;return null===a?(n.next=n,Po(t)):(n.next=a.next,a.next=n),t.interleaved=n,To(e,r)}function To(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}var Ro=!1;function Do(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function zo(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function No(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function Mo(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,0!=(2&Lu)){var a=r.pending;return null===a?t.next=t:(t.next=a.next,a.next=t),r.pending=t,To(e,n)}return null===(a=r.interleaved)?(t.next=t,Po(r)):(t.next=a.next,a.next=t),r.interleaved=t,To(e,n)}function Oo(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,0!=(4194240&n))){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,yt(e,n)}}function jo(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var a=null,o=null;if(null!==(n=n.firstBaseUpdate)){do{var l={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===o?a=o=l:o=o.next=l,n=n.next}while(null!==n);null===o?a=o=t:o=o.next=t}else a=o=t;return n={baseState:r.baseState,firstBaseUpdate:a,lastBaseUpdate:o,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function Uo(e,t,n,r){var a=e.updateQueue;Ro=!1;var o=a.firstBaseUpdate,l=a.lastBaseUpdate,i=a.shared.pending;if(null!==i){a.shared.pending=null;var u=i,s=u.next;u.next=null,null===l?o=s:l.next=s,l=u;var c=e.alternate;null!==c&&(i=(c=c.updateQueue).lastBaseUpdate)!==l&&(null===i?c.firstBaseUpdate=s:i.next=s,c.lastBaseUpdate=u)}if(null!==o){var f=a.baseState;for(l=0,c=s=u=null,i=o;;){var d=i.lane,p=i.eventTime;if((r&d)===d){null!==c&&(c=c.next={eventTime:p,lane:0,tag:i.tag,payload:i.payload,callback:i.callback,next:null});e:{var h=e,m=i;switch(d=t,p=n,m.tag){case 1:if("function"==typeof(h=m.payload)){f=h.call(p,f,d);break e}f=h;break e;case 3:h.flags=-65537&h.flags|128;case 0:if(null==(d="function"==typeof(h=m.payload)?h.call(p,f,d):h))break e;f=j({},f,d);break e;case 2:Ro=!0}}null!==i.callback&&0!==i.lane&&(e.flags|=64,null===(d=a.effects)?a.effects=[i]:d.push(i))}else p={eventTime:p,lane:d,tag:i.tag,payload:i.payload,callback:i.callback,next:null},null===c?(s=c=p,u=f):c=c.next=p,l|=d;if(null===(i=i.next)){if(null===(i=a.shared.pending))break;i=(d=i).next,d.next=null,a.lastBaseUpdate=d,a.shared.pending=null}}if(null===c&&(u=f),a.baseState=u,a.firstBaseUpdate=s,a.lastBaseUpdate=c,null!==(t=a.shared.interleaved)){a=t;do{l|=a.lane,a=a.next}while(a!==t)}else null===o&&(a.shared.lanes=0);ju|=l,e.lanes=l,e.memoizedState=f}}function Fo(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],a=r.callback;if(null!==a){if(r.callback=null,r=n,"function"!=typeof a)throw Error(o(191,a));a.call(r)}}}var Io=(new r.Component).refs;function Bo(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:j({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var $o={isMounted:function(e){return!!(e=e._reactInternals)&&$e(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=ts(),a=ns(e),o=No(r,a);o.payload=t,null!=n&&(o.callback=n),null!==(t=Mo(e,o,a))&&(rs(t,e,a,r),Oo(t,e,a))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=ts(),a=ns(e),o=No(r,a);o.tag=1,o.payload=t,null!=n&&(o.callback=n),null!==(t=Mo(e,o,a))&&(rs(t,e,a,r),Oo(t,e,a))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=ts(),r=ns(e),a=No(n,r);a.tag=2,null!=t&&(a.callback=t),null!==(t=Mo(e,a,r))&&(rs(t,e,r,n),Oo(t,e,r))}};function Wo(e,t,n,r,a,o,l){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,o,l):!(t.prototype&&t.prototype.isPureReactComponent&&ur(n,r)&&ur(a,o))}function Vo(e,t,n){var r=!1,a=_a,o=t.contextType;return"object"==typeof o&&null!==o?o=Ao(o):(a=Da(t)?Ta:Pa.current,o=(r=null!=(r=t.contextTypes))?Ra(e,a):_a),t=new t(n,o),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=$o,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=a,e.__reactInternalMemoizedMaskedChildContext=o),t}function Ho(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&$o.enqueueReplaceState(t,t.state,null)}function Qo(e,t,n,r){var a=e.stateNode;a.props=n,a.state=e.memoizedState,a.refs=Io,Do(e);var o=t.contextType;"object"==typeof o&&null!==o?a.context=Ao(o):(o=Da(t)?Ta:Pa.current,a.context=Ra(e,o)),a.state=e.memoizedState,"function"==typeof(o=t.getDerivedStateFromProps)&&(Bo(e,t,o,n),a.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||(t=a.state,"function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount(),t!==a.state&&$o.enqueueReplaceState(a,a.state,null),Uo(e,n,a,r),a.state=e.memoizedState),"function"==typeof a.componentDidMount&&(e.flags|=4194308)}function qo(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(o(309));var r=n.stateNode}if(!r)throw Error(o(147,e));var a=r,l=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===l?t.ref:(t=function(e){var t=a.refs;t===Io&&(t=a.refs={}),null===e?delete t[l]:t[l]=e},t._stringRef=l,t)}if("string"!=typeof e)throw Error(o(284));if(!n._owner)throw Error(o(290,e))}return e}function Ko(e,t){throw e=Object.prototype.toString.call(t),Error(o(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function Yo(e){return(0,e._init)(e._payload)}function Go(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function a(e,t){return(e=Ns(e,t)).index=0,e.sibling=null,e}function l(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=2,n):r:(t.flags|=2,n):(t.flags|=1048576,n)}function i(t){return e&&null===t.alternate&&(t.flags|=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=Us(n,e.mode,r)).return=e,t):((t=a(t,n)).return=e,t)}function s(e,t,n,r){var o=n.type;return o===x?f(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===o||"object"==typeof o&&null!==o&&o.$$typeof===D&&Yo(o)===t.type)?((r=a(t,n.props)).ref=qo(e,t,n),r.return=e,r):((r=Ms(n.type,n.key,n.props,null,e.mode,r)).ref=qo(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Fs(n,e.mode,r)).return=e,t):((t=a(t,n.children||[])).return=e,t)}function f(e,t,n,r,o){return null===t||7!==t.tag?((t=Os(n,e.mode,r,o)).return=e,t):((t=a(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=Us(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case k:return(n=Ms(t.type,t.key,t.props,null,e.mode,n)).ref=qo(e,null,t),n.return=e,n;case S:return(t=Fs(t,e.mode,n)).return=e,t;case D:return d(e,(0,t._init)(t._payload),n)}if(te(t)||M(t))return(t=Os(t,e.mode,n,null)).return=e,t;Ko(e,t)}return null}function p(e,t,n,r){var a=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==a?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case k:return n.key===a?s(e,t,n,r):null;case S:return n.key===a?c(e,t,n,r):null;case D:return p(e,t,(a=n._init)(n._payload),r)}if(te(n)||M(n))return null!==a?null:f(e,t,n,r,null);Ko(e,n)}return null}function h(e,t,n,r,a){if("string"==typeof r&&""!==r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,a);if("object"==typeof r&&null!==r){switch(r.$$typeof){case k:return s(t,e=e.get(null===r.key?n:r.key)||null,r,a);case S:return c(t,e=e.get(null===r.key?n:r.key)||null,r,a);case D:return h(e,t,n,(0,r._init)(r._payload),a)}if(te(r)||M(r))return f(t,e=e.get(n)||null,r,a,null);Ko(t,r)}return null}function m(a,o,i,u){for(var s=null,c=null,f=o,m=o=0,v=null;null!==f&&m<i.length;m++){f.index>m?(v=f,f=null):v=f.sibling;var g=p(a,f,i[m],u);if(null===g){null===f&&(f=v);break}e&&f&&null===g.alternate&&t(a,f),o=l(g,o,m),null===c?s=g:c.sibling=g,c=g,f=v}if(m===i.length)return n(a,f),ao&&Ja(a,m),s;if(null===f){for(;m<i.length;m++)null!==(f=d(a,i[m],u))&&(o=l(f,o,m),null===c?s=f:c.sibling=f,c=f);return ao&&Ja(a,m),s}for(f=r(a,f);m<i.length;m++)null!==(v=h(f,a,m,i[m],u))&&(e&&null!==v.alternate&&f.delete(null===v.key?m:v.key),o=l(v,o,m),null===c?s=v:c.sibling=v,c=v);return e&&f.forEach((function(e){return t(a,e)})),ao&&Ja(a,m),s}function v(a,i,u,s){var c=M(u);if("function"!=typeof c)throw Error(o(150));if(null==(u=c.call(u)))throw Error(o(151));for(var f=c=null,m=i,v=i=0,g=null,y=u.next();null!==m&&!y.done;v++,y=u.next()){m.index>v?(g=m,m=null):g=m.sibling;var b=p(a,m,y.value,s);if(null===b){null===m&&(m=g);break}e&&m&&null===b.alternate&&t(a,m),i=l(b,i,v),null===f?c=b:f.sibling=b,f=b,m=g}if(y.done)return n(a,m),ao&&Ja(a,v),c;if(null===m){for(;!y.done;v++,y=u.next())null!==(y=d(a,y.value,s))&&(i=l(y,i,v),null===f?c=y:f.sibling=y,f=y);return ao&&Ja(a,v),c}for(m=r(a,m);!y.done;v++,y=u.next())null!==(y=h(m,a,v,y.value,s))&&(e&&null!==y.alternate&&m.delete(null===y.key?v:y.key),i=l(y,i,v),null===f?c=y:f.sibling=y,f=y);return e&&m.forEach((function(e){return t(a,e)})),ao&&Ja(a,v),c}return function e(r,o,l,u){if("object"==typeof l&&null!==l&&l.type===x&&null===l.key&&(l=l.props.children),"object"==typeof l&&null!==l){switch(l.$$typeof){case k:e:{for(var s=l.key,c=o;null!==c;){if(c.key===s){if((s=l.type)===x){if(7===c.tag){n(r,c.sibling),(o=a(c,l.props.children)).return=r,r=o;break e}}else if(c.elementType===s||"object"==typeof s&&null!==s&&s.$$typeof===D&&Yo(s)===c.type){n(r,c.sibling),(o=a(c,l.props)).ref=qo(r,c,l),o.return=r,r=o;break e}n(r,c);break}t(r,c),c=c.sibling}l.type===x?((o=Os(l.props.children,r.mode,u,l.key)).return=r,r=o):((u=Ms(l.type,l.key,l.props,null,r.mode,u)).ref=qo(r,o,l),u.return=r,r=u)}return i(r);case S:e:{for(c=l.key;null!==o;){if(o.key===c){if(4===o.tag&&o.stateNode.containerInfo===l.containerInfo&&o.stateNode.implementation===l.implementation){n(r,o.sibling),(o=a(o,l.children||[])).return=r,r=o;break e}n(r,o);break}t(r,o),o=o.sibling}(o=Fs(l,r.mode,u)).return=r,r=o}return i(r);case D:return e(r,o,(c=l._init)(l._payload),u)}if(te(l))return m(r,o,l,u);if(M(l))return v(r,o,l,u);Ko(r,l)}return"string"==typeof l&&""!==l||"number"==typeof l?(l=""+l,null!==o&&6===o.tag?(n(r,o.sibling),(o=a(o,l)).return=r,r=o):(n(r,o),(o=Us(l,r.mode,u)).return=r,r=o),i(r)):n(r,o)}}var Xo=Go(!0),Jo=Go(!1),Zo={},el=Ca(Zo),tl=Ca(Zo),nl=Ca(Zo);function rl(e){if(e===Zo)throw Error(o(174));return e}function al(e,t){switch(Aa(nl,t),Aa(tl,e),Aa(el,Zo),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:ue(null,"");break;default:t=ue(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}Ea(el),Aa(el,t)}function ol(){Ea(el),Ea(tl),Ea(nl)}function ll(e){rl(nl.current);var t=rl(el.current),n=ue(t,e.type);t!==n&&(Aa(tl,e),Aa(el,n))}function il(e){tl.current===e&&(Ea(el),Ea(tl))}var ul=Ca(0);function sl(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(128&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var cl=[];function fl(){for(var e=0;e<cl.length;e++)cl[e]._workInProgressVersionPrimary=null;cl.length=0}var dl=w.ReactCurrentDispatcher,pl=w.ReactCurrentBatchConfig,hl=0,ml=null,vl=null,gl=null,yl=!1,bl=!1,wl=0,kl=0;function Sl(){throw Error(o(321))}function xl(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!ir(e[n],t[n]))return!1;return!0}function Cl(e,t,n,r,a,l){if(hl=l,ml=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,dl.current=null===e||null===e.memoizedState?ii:ui,e=n(r,a),bl){l=0;do{if(bl=!1,wl=0,25<=l)throw Error(o(301));l+=1,gl=vl=null,t.updateQueue=null,dl.current=si,e=n(r,a)}while(bl)}if(dl.current=li,t=null!==vl&&null!==vl.next,hl=0,gl=vl=ml=null,yl=!1,t)throw Error(o(300));return e}function El(){var e=0!==wl;return wl=0,e}function Al(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===gl?ml.memoizedState=gl=e:gl=gl.next=e,gl}function _l(){if(null===vl){var e=ml.alternate;e=null!==e?e.memoizedState:null}else e=vl.next;var t=null===gl?ml.memoizedState:gl.next;if(null!==t)gl=t,vl=e;else{if(null===e)throw Error(o(310));e={memoizedState:(vl=e).memoizedState,baseState:vl.baseState,baseQueue:vl.baseQueue,queue:vl.queue,next:null},null===gl?ml.memoizedState=gl=e:gl=gl.next=e}return gl}function Pl(e,t){return"function"==typeof t?t(e):t}function Ll(e){var t=_l(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=vl,a=r.baseQueue,l=n.pending;if(null!==l){if(null!==a){var i=a.next;a.next=l.next,l.next=i}r.baseQueue=a=l,n.pending=null}if(null!==a){l=a.next,r=r.baseState;var u=i=null,s=null,c=l;do{var f=c.lane;if((hl&f)===f)null!==s&&(s=s.next={lane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),r=c.hasEagerState?c.eagerState:e(r,c.action);else{var d={lane:f,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null};null===s?(u=s=d,i=r):s=s.next=d,ml.lanes|=f,ju|=f}c=c.next}while(null!==c&&c!==l);null===s?i=r:s.next=u,ir(r,t.memoizedState)||(wi=!0),t.memoizedState=r,t.baseState=i,t.baseQueue=s,n.lastRenderedState=r}if(null!==(e=n.interleaved)){a=e;do{l=a.lane,ml.lanes|=l,ju|=l,a=a.next}while(a!==e)}else null===a&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function Tl(e){var t=_l(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=n.dispatch,a=n.pending,l=t.memoizedState;if(null!==a){n.pending=null;var i=a=a.next;do{l=e(l,i.action),i=i.next}while(i!==a);ir(l,t.memoizedState)||(wi=!0),t.memoizedState=l,null===t.baseQueue&&(t.baseState=l),n.lastRenderedState=l}return[l,r]}function Rl(){}function Dl(e,t){var n=ml,r=_l(),a=t(),l=!ir(r.memoizedState,a);if(l&&(r.memoizedState=a,wi=!0),r=r.queue,Vl(Ml.bind(null,n,r,e),[e]),r.getSnapshot!==t||l||null!==gl&&1&gl.memoizedState.tag){if(n.flags|=2048,Fl(9,Nl.bind(null,n,r,a,t),void 0,null),null===Tu)throw Error(o(349));0!=(30&hl)||zl(n,t,a)}return a}function zl(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=ml.updateQueue)?(t={lastEffect:null,stores:null},ml.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function Nl(e,t,n,r){t.value=n,t.getSnapshot=r,Ol(t)&&jl(e)}function Ml(e,t,n){return n((function(){Ol(t)&&jl(e)}))}function Ol(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!ir(e,n)}catch(e){return!0}}function jl(e){var t=To(e,1);null!==t&&rs(t,e,1,-1)}function Ul(e){var t=Al();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:Pl,lastRenderedState:e},t.queue=e,e=e.dispatch=ni.bind(null,ml,e),[t.memoizedState,e]}function Fl(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=ml.updateQueue)?(t={lastEffect:null,stores:null},ml.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function Il(){return _l().memoizedState}function Bl(e,t,n,r){var a=Al();ml.flags|=e,a.memoizedState=Fl(1|t,n,void 0,void 0===r?null:r)}function $l(e,t,n,r){var a=_l();r=void 0===r?null:r;var o=void 0;if(null!==vl){var l=vl.memoizedState;if(o=l.destroy,null!==r&&xl(r,l.deps))return void(a.memoizedState=Fl(t,n,o,r))}ml.flags|=e,a.memoizedState=Fl(1|t,n,o,r)}function Wl(e,t){return Bl(8390656,8,e,t)}function Vl(e,t){return $l(2048,8,e,t)}function Hl(e,t){return $l(4,2,e,t)}function Ql(e,t){return $l(4,4,e,t)}function ql(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Kl(e,t,n){return n=null!=n?n.concat([e]):null,$l(4,4,ql.bind(null,t,e),n)}function Yl(){}function Gl(e,t){var n=_l();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&xl(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Xl(e,t){var n=_l();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&xl(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Jl(e,t,n){return 0==(21&hl)?(e.baseState&&(e.baseState=!1,wi=!0),e.memoizedState=n):(ir(n,t)||(n=mt(),ml.lanes|=n,ju|=n,e.baseState=!0),t)}function Zl(e,t){var n=bt;bt=0!==n&&4>n?n:4,e(!0);var r=pl.transition;pl.transition={};try{e(!1),t()}finally{bt=n,pl.transition=r}}function ei(){return _l().memoizedState}function ti(e,t,n){var r=ns(e);n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},ri(e)?ai(t,n):null!==(n=Lo(e,t,n,r))&&(rs(n,e,r,ts()),oi(n,t,r))}function ni(e,t,n){var r=ns(e),a={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(ri(e))ai(t,a);else{var o=e.alternate;if(0===e.lanes&&(null===o||0===o.lanes)&&null!==(o=t.lastRenderedReducer))try{var l=t.lastRenderedState,i=o(l,n);if(a.hasEagerState=!0,a.eagerState=i,ir(i,l)){var u=t.interleaved;return null===u?(a.next=a,Po(t)):(a.next=u.next,u.next=a),void(t.interleaved=a)}}catch(e){}null!==(n=Lo(e,t,a,r))&&(rs(n,e,r,a=ts()),oi(n,t,r))}}function ri(e){var t=e.alternate;return e===ml||null!==t&&t===ml}function ai(e,t){bl=yl=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function oi(e,t,n){if(0!=(4194240&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,yt(e,n)}}var li={readContext:Ao,useCallback:Sl,useContext:Sl,useEffect:Sl,useImperativeHandle:Sl,useInsertionEffect:Sl,useLayoutEffect:Sl,useMemo:Sl,useReducer:Sl,useRef:Sl,useState:Sl,useDebugValue:Sl,useDeferredValue:Sl,useTransition:Sl,useMutableSource:Sl,useSyncExternalStore:Sl,useId:Sl,unstable_isNewReconciler:!1},ii={readContext:Ao,useCallback:function(e,t){return Al().memoizedState=[e,void 0===t?null:t],e},useContext:Ao,useEffect:Wl,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,Bl(4194308,4,ql.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Bl(4194308,4,e,t)},useInsertionEffect:function(e,t){return Bl(4,2,e,t)},useMemo:function(e,t){var n=Al();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Al();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=ti.bind(null,ml,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Al().memoizedState=e},useState:Ul,useDebugValue:Yl,useDeferredValue:function(e){return Al().memoizedState=e},useTransition:function(){var e=Ul(!1),t=e[0];return e=Zl.bind(null,e[1]),Al().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=ml,a=Al();if(ao){if(void 0===n)throw Error(o(407));n=n()}else{if(n=t(),null===Tu)throw Error(o(349));0!=(30&hl)||zl(r,t,n)}a.memoizedState=n;var l={value:n,getSnapshot:t};return a.queue=l,Wl(Ml.bind(null,r,l,e),[e]),r.flags|=2048,Fl(9,Nl.bind(null,r,l,n,t),void 0,null),n},useId:function(){var e=Al(),t=Tu.identifierPrefix;if(ao){var n=Xa;t=":"+t+"R"+(n=(Ga&~(1<<32-lt(Ga)-1)).toString(32)+n),0<(n=wl++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=kl++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},ui={readContext:Ao,useCallback:Gl,useContext:Ao,useEffect:Vl,useImperativeHandle:Kl,useInsertionEffect:Hl,useLayoutEffect:Ql,useMemo:Xl,useReducer:Ll,useRef:Il,useState:function(){return Ll(Pl)},useDebugValue:Yl,useDeferredValue:function(e){return Jl(_l(),vl.memoizedState,e)},useTransition:function(){return[Ll(Pl)[0],_l().memoizedState]},useMutableSource:Rl,useSyncExternalStore:Dl,useId:ei,unstable_isNewReconciler:!1},si={readContext:Ao,useCallback:Gl,useContext:Ao,useEffect:Vl,useImperativeHandle:Kl,useInsertionEffect:Hl,useLayoutEffect:Ql,useMemo:Xl,useReducer:Tl,useRef:Il,useState:function(){return Tl(Pl)},useDebugValue:Yl,useDeferredValue:function(e){var t=_l();return null===vl?t.memoizedState=e:Jl(t,vl.memoizedState,e)},useTransition:function(){return[Tl(Pl)[0],_l().memoizedState]},useMutableSource:Rl,useSyncExternalStore:Dl,useId:ei,unstable_isNewReconciler:!1};function ci(e,t){try{var n="",r=t;do{n+=B(r),r=r.return}while(r);var a=n}catch(e){a="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:a,digest:null}}function fi(e,t,n){return{value:e,source:null,stack:null!=n?n:null,digest:null!=t?t:null}}function di(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var pi="function"==typeof WeakMap?WeakMap:Map;function hi(e,t,n){(n=No(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Hu||(Hu=!0,Qu=r),di(0,t)},n}function mi(e,t,n){(n=No(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var a=t.value;n.payload=function(){return r(a)},n.callback=function(){di(0,t)}}var o=e.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(n.callback=function(){di(0,t),"function"!=typeof r&&(null===qu?qu=new Set([this]):qu.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}function vi(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new pi;var a=new Set;r.set(t,a)}else void 0===(a=r.get(t))&&(a=new Set,r.set(t,a));a.has(n)||(a.add(n),e=As.bind(null,e,t,n),t.then(e,e))}function gi(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function yi(e,t,n,r,a){return 0==(1&e.mode)?(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((t=No(-1,1)).tag=2,Mo(n,t,1))),n.lanes|=1),e):(e.flags|=65536,e.lanes=a,e)}var bi=w.ReactCurrentOwner,wi=!1;function ki(e,t,n,r){t.child=null===e?Jo(t,null,n,r):Xo(t,e.child,n,r)}function Si(e,t,n,r,a){n=n.render;var o=t.ref;return Eo(t,a),r=Cl(e,t,n,r,o,a),n=El(),null===e||wi?(ao&&n&&eo(t),t.flags|=1,ki(e,t,r,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~a,Hi(e,t,a))}function xi(e,t,n,r,a){if(null===e){var o=n.type;return"function"!=typeof o||zs(o)||void 0!==o.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Ms(n.type,null,r,t,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=o,Ci(e,t,o,r,a))}if(o=e.child,0==(e.lanes&a)){var l=o.memoizedProps;if((n=null!==(n=n.compare)?n:ur)(l,r)&&e.ref===t.ref)return Hi(e,t,a)}return t.flags|=1,(e=Ns(o,r)).ref=t.ref,e.return=t,t.child=e}function Ci(e,t,n,r,a){if(null!==e){var o=e.memoizedProps;if(ur(o,r)&&e.ref===t.ref){if(wi=!1,t.pendingProps=r=o,0==(e.lanes&a))return t.lanes=e.lanes,Hi(e,t,a);0!=(131072&e.flags)&&(wi=!0)}}return _i(e,t,n,r,a)}function Ei(e,t,n){var r=t.pendingProps,a=r.children,o=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(0==(1&t.mode))t.memoizedState={baseLanes:0,cachePool:null,transitions:null},Aa(Nu,zu),zu|=n;else{if(0==(1073741824&n))return e=null!==o?o.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,Aa(Nu,zu),zu|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==o?o.baseLanes:n,Aa(Nu,zu),zu|=r}else null!==o?(r=o.baseLanes|n,t.memoizedState=null):r=n,Aa(Nu,zu),zu|=r;return ki(e,t,a,n),t.child}function Ai(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function _i(e,t,n,r,a){var o=Da(n)?Ta:Pa.current;return o=Ra(t,o),Eo(t,a),n=Cl(e,t,n,r,o,a),r=El(),null===e||wi?(ao&&r&&eo(t),t.flags|=1,ki(e,t,n,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~a,Hi(e,t,a))}function Pi(e,t,n,r,a){if(Da(n)){var o=!0;Oa(t)}else o=!1;if(Eo(t,a),null===t.stateNode)Vi(e,t),Vo(t,n,r),Qo(t,n,r,a),r=!0;else if(null===e){var l=t.stateNode,i=t.memoizedProps;l.props=i;var u=l.context,s=n.contextType;s="object"==typeof s&&null!==s?Ao(s):Ra(t,s=Da(n)?Ta:Pa.current);var c=n.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof l.getSnapshotBeforeUpdate;f||"function"!=typeof l.UNSAFE_componentWillReceiveProps&&"function"!=typeof l.componentWillReceiveProps||(i!==r||u!==s)&&Ho(t,l,r,s),Ro=!1;var d=t.memoizedState;l.state=d,Uo(t,r,l,a),u=t.memoizedState,i!==r||d!==u||La.current||Ro?("function"==typeof c&&(Bo(t,n,c,r),u=t.memoizedState),(i=Ro||Wo(t,n,i,r,d,u,s))?(f||"function"!=typeof l.UNSAFE_componentWillMount&&"function"!=typeof l.componentWillMount||("function"==typeof l.componentWillMount&&l.componentWillMount(),"function"==typeof l.UNSAFE_componentWillMount&&l.UNSAFE_componentWillMount()),"function"==typeof l.componentDidMount&&(t.flags|=4194308)):("function"==typeof l.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=u),l.props=r,l.state=u,l.context=s,r=i):("function"==typeof l.componentDidMount&&(t.flags|=4194308),r=!1)}else{l=t.stateNode,zo(e,t),i=t.memoizedProps,s=t.type===t.elementType?i:go(t.type,i),l.props=s,f=t.pendingProps,d=l.context,u="object"==typeof(u=n.contextType)&&null!==u?Ao(u):Ra(t,u=Da(n)?Ta:Pa.current);var p=n.getDerivedStateFromProps;(c="function"==typeof p||"function"==typeof l.getSnapshotBeforeUpdate)||"function"!=typeof l.UNSAFE_componentWillReceiveProps&&"function"!=typeof l.componentWillReceiveProps||(i!==f||d!==u)&&Ho(t,l,r,u),Ro=!1,d=t.memoizedState,l.state=d,Uo(t,r,l,a);var h=t.memoizedState;i!==f||d!==h||La.current||Ro?("function"==typeof p&&(Bo(t,n,p,r),h=t.memoizedState),(s=Ro||Wo(t,n,s,r,d,h,u)||!1)?(c||"function"!=typeof l.UNSAFE_componentWillUpdate&&"function"!=typeof l.componentWillUpdate||("function"==typeof l.componentWillUpdate&&l.componentWillUpdate(r,h,u),"function"==typeof l.UNSAFE_componentWillUpdate&&l.UNSAFE_componentWillUpdate(r,h,u)),"function"==typeof l.componentDidUpdate&&(t.flags|=4),"function"==typeof l.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof l.componentDidUpdate||i===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof l.getSnapshotBeforeUpdate||i===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=h),l.props=r,l.state=h,l.context=u,r=s):("function"!=typeof l.componentDidUpdate||i===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof l.getSnapshotBeforeUpdate||i===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),r=!1)}return Li(e,t,n,r,o,a)}function Li(e,t,n,r,a,o){Ai(e,t);var l=0!=(128&t.flags);if(!r&&!l)return a&&ja(t,n,!1),Hi(e,t,o);r=t.stateNode,bi.current=t;var i=l&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&l?(t.child=Xo(t,e.child,null,o),t.child=Xo(t,null,i,o)):ki(e,t,i,o),t.memoizedState=r.state,a&&ja(t,n,!0),t.child}function Ti(e){var t=e.stateNode;t.pendingContext?Na(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Na(0,t.context,!1),al(e,t.containerInfo)}function Ri(e,t,n,r,a){return ho(),mo(a),t.flags|=256,ki(e,t,n,r),t.child}var Di,zi,Ni,Mi,Oi={dehydrated:null,treeContext:null,retryLane:0};function ji(e){return{baseLanes:e,cachePool:null,transitions:null}}function Ui(e,t,n){var r,a=t.pendingProps,l=ul.current,i=!1,u=0!=(128&t.flags);if((r=u)||(r=(null===e||null!==e.memoizedState)&&0!=(2&l)),r?(i=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(l|=1),Aa(ul,1&l),null===e)return so(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(0==(1&t.mode)?t.lanes=1:"$!"===e.data?t.lanes=8:t.lanes=1073741824,null):(u=a.children,e=a.fallback,i?(a=t.mode,i=t.child,u={mode:"hidden",children:u},0==(1&a)&&null!==i?(i.childLanes=0,i.pendingProps=u):i=js(u,a,0,null),e=Os(e,a,n,null),i.return=t,e.return=t,i.sibling=e,t.child=i,t.child.memoizedState=ji(n),t.memoizedState=Oi,e):Fi(t,u));if(null!==(l=e.memoizedState)&&null!==(r=l.dehydrated))return function(e,t,n,r,a,l,i){if(n)return 256&t.flags?(t.flags&=-257,Ii(e,t,i,r=fi(Error(o(422))))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(l=r.fallback,a=t.mode,r=js({mode:"visible",children:r.children},a,0,null),(l=Os(l,a,i,null)).flags|=2,r.return=t,l.return=t,r.sibling=l,t.child=r,0!=(1&t.mode)&&Xo(t,e.child,null,i),t.child.memoizedState=ji(i),t.memoizedState=Oi,l);if(0==(1&t.mode))return Ii(e,t,i,null);if("$!"===a.data){if(r=a.nextSibling&&a.nextSibling.dataset)var u=r.dgst;return r=u,Ii(e,t,i,r=fi(l=Error(o(419)),r,void 0))}if(u=0!=(i&e.childLanes),wi||u){if(null!==(r=Tu)){switch(i&-i){case 4:a=2;break;case 16:a=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:a=32;break;case 536870912:a=268435456;break;default:a=0}0!==(a=0!=(a&(r.suspendedLanes|i))?0:a)&&a!==l.retryLane&&(l.retryLane=a,To(e,a),rs(r,e,a,-1))}return vs(),Ii(e,t,i,r=fi(Error(o(421))))}return"$?"===a.data?(t.flags|=128,t.child=e.child,t=Ps.bind(null,e),a._reactRetry=t,null):(e=l.treeContext,ro=sa(a.nextSibling),no=t,ao=!0,oo=null,null!==e&&(qa[Ka++]=Ga,qa[Ka++]=Xa,qa[Ka++]=Ya,Ga=e.id,Xa=e.overflow,Ya=t),(t=Fi(t,r.children)).flags|=4096,t)}(e,t,u,a,r,l,n);if(i){i=a.fallback,u=t.mode,r=(l=e.child).sibling;var s={mode:"hidden",children:a.children};return 0==(1&u)&&t.child!==l?((a=t.child).childLanes=0,a.pendingProps=s,t.deletions=null):(a=Ns(l,s)).subtreeFlags=14680064&l.subtreeFlags,null!==r?i=Ns(r,i):(i=Os(i,u,n,null)).flags|=2,i.return=t,a.return=t,a.sibling=i,t.child=a,a=i,i=t.child,u=null===(u=e.child.memoizedState)?ji(n):{baseLanes:u.baseLanes|n,cachePool:null,transitions:u.transitions},i.memoizedState=u,i.childLanes=e.childLanes&~n,t.memoizedState=Oi,a}return e=(i=e.child).sibling,a=Ns(i,{mode:"visible",children:a.children}),0==(1&t.mode)&&(a.lanes=n),a.return=t,a.sibling=null,null!==e&&(null===(n=t.deletions)?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=a,t.memoizedState=null,a}function Fi(e,t){return(t=js({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function Ii(e,t,n,r){return null!==r&&mo(r),Xo(t,e.child,null,n),(e=Fi(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function Bi(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),Co(e.return,t,n)}function $i(e,t,n,r,a){var o=e.memoizedState;null===o?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:a}:(o.isBackwards=t,o.rendering=null,o.renderingStartTime=0,o.last=r,o.tail=n,o.tailMode=a)}function Wi(e,t,n){var r=t.pendingProps,a=r.revealOrder,o=r.tail;if(ki(e,t,r.children,n),0!=(2&(r=ul.current)))r=1&r|2,t.flags|=128;else{if(null!==e&&0!=(128&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Bi(e,n,t);else if(19===e.tag)Bi(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(Aa(ul,r),0==(1&t.mode))t.memoizedState=null;else switch(a){case"forwards":for(n=t.child,a=null;null!==n;)null!==(e=n.alternate)&&null===sl(e)&&(a=n),n=n.sibling;null===(n=a)?(a=t.child,t.child=null):(a=n.sibling,n.sibling=null),$i(t,!1,a,n,o);break;case"backwards":for(n=null,a=t.child,t.child=null;null!==a;){if(null!==(e=a.alternate)&&null===sl(e)){t.child=a;break}e=a.sibling,a.sibling=n,n=a,a=e}$i(t,!0,n,null,o);break;case"together":$i(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function Vi(e,t){0==(1&t.mode)&&null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2)}function Hi(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),ju|=t.lanes,0==(n&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(o(153));if(null!==t.child){for(n=Ns(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Ns(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Qi(e,t){if(!ao)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function qi(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=14680064&a.subtreeFlags,r|=14680064&a.flags,a.return=e,a=a.sibling;else for(a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=a.subtreeFlags,r|=a.flags,a.return=e,a=a.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function Ki(e,t,n){var r=t.pendingProps;switch(to(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return qi(t),null;case 1:case 17:return Da(t.type)&&za(),qi(t),null;case 3:return r=t.stateNode,ol(),Ea(La),Ea(Pa),fl(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(fo(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&0==(256&t.flags)||(t.flags|=1024,null!==oo&&(is(oo),oo=null))),zi(e,t),qi(t),null;case 5:il(t);var a=rl(nl.current);if(n=t.type,null!==e&&null!=t.stateNode)Ni(e,t,n,r,a),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(null===t.stateNode)throw Error(o(166));return qi(t),null}if(e=rl(el.current),fo(t)){r=t.stateNode,n=t.type;var l=t.memoizedProps;switch(r[da]=t,r[pa]=l,e=0!=(1&t.mode),n){case"dialog":Fr("cancel",r),Fr("close",r);break;case"iframe":case"object":case"embed":Fr("load",r);break;case"video":case"audio":for(a=0;a<Mr.length;a++)Fr(Mr[a],r);break;case"source":Fr("error",r);break;case"img":case"image":case"link":Fr("error",r),Fr("load",r);break;case"details":Fr("toggle",r);break;case"input":G(r,l),Fr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!l.multiple},Fr("invalid",r);break;case"textarea":ae(r,l),Fr("invalid",r)}for(var u in ye(n,l),a=null,l)if(l.hasOwnProperty(u)){var s=l[u];"children"===u?"string"==typeof s?r.textContent!==s&&(!0!==l.suppressHydrationWarning&&Jr(r.textContent,s,e),a=["children",s]):"number"==typeof s&&r.textContent!==""+s&&(!0!==l.suppressHydrationWarning&&Jr(r.textContent,s,e),a=["children",""+s]):i.hasOwnProperty(u)&&null!=s&&"onScroll"===u&&Fr("scroll",r)}switch(n){case"input":Q(r),Z(r,l,!0);break;case"textarea":Q(r),le(r);break;case"select":case"option":break;default:"function"==typeof l.onClick&&(r.onclick=Zr)}r=a,t.updateQueue=r,null!==r&&(t.flags|=4)}else{u=9===a.nodeType?a:a.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=ie(n)),"http://www.w3.org/1999/xhtml"===e?"script"===n?((e=u.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=u.createElement(n,{is:r.is}):(e=u.createElement(n),"select"===n&&(u=e,r.multiple?u.multiple=!0:r.size&&(u.size=r.size))):e=u.createElementNS(e,n),e[da]=t,e[pa]=r,Di(e,t,!1,!1),t.stateNode=e;e:{switch(u=be(n,r),n){case"dialog":Fr("cancel",e),Fr("close",e),a=r;break;case"iframe":case"object":case"embed":Fr("load",e),a=r;break;case"video":case"audio":for(a=0;a<Mr.length;a++)Fr(Mr[a],e);a=r;break;case"source":Fr("error",e),a=r;break;case"img":case"image":case"link":Fr("error",e),Fr("load",e),a=r;break;case"details":Fr("toggle",e),a=r;break;case"input":G(e,r),a=Y(e,r),Fr("invalid",e);break;case"option":default:a=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},a=j({},r,{value:void 0}),Fr("invalid",e);break;case"textarea":ae(e,r),a=re(e,r),Fr("invalid",e)}for(l in ye(n,a),s=a)if(s.hasOwnProperty(l)){var c=s[l];"style"===l?ve(e,c):"dangerouslySetInnerHTML"===l?null!=(c=c?c.__html:void 0)&&fe(e,c):"children"===l?"string"==typeof c?("textarea"!==n||""!==c)&&de(e,c):"number"==typeof c&&de(e,""+c):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(i.hasOwnProperty(l)?null!=c&&"onScroll"===l&&Fr("scroll",e):null!=c&&b(e,l,c,u))}switch(n){case"input":Q(e),Z(e,r,!1);break;case"textarea":Q(e),le(e);break;case"option":null!=r.value&&e.setAttribute("value",""+V(r.value));break;case"select":e.multiple=!!r.multiple,null!=(l=r.value)?ne(e,!!r.multiple,l,!1):null!=r.defaultValue&&ne(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof a.onClick&&(e.onclick=Zr)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return qi(t),null;case 6:if(e&&null!=t.stateNode)Mi(e,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(o(166));if(n=rl(nl.current),rl(el.current),fo(t)){if(r=t.stateNode,n=t.memoizedProps,r[da]=t,(l=r.nodeValue!==n)&&null!==(e=no))switch(e.tag){case 3:Jr(r.nodeValue,n,0!=(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Jr(r.nodeValue,n,0!=(1&e.mode))}l&&(t.flags|=4)}else(r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[da]=t,t.stateNode=r}return qi(t),null;case 13:if(Ea(ul),r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(ao&&null!==ro&&0!=(1&t.mode)&&0==(128&t.flags))po(),ho(),t.flags|=98560,l=!1;else if(l=fo(t),null!==r&&null!==r.dehydrated){if(null===e){if(!l)throw Error(o(318));if(!(l=null!==(l=t.memoizedState)?l.dehydrated:null))throw Error(o(317));l[da]=t}else ho(),0==(128&t.flags)&&(t.memoizedState=null),t.flags|=4;qi(t),l=!1}else null!==oo&&(is(oo),oo=null),l=!0;if(!l)return 65536&t.flags?t:null}return 0!=(128&t.flags)?(t.lanes=n,t):((r=null!==r)!=(null!==e&&null!==e.memoizedState)&&r&&(t.child.flags|=8192,0!=(1&t.mode)&&(null===e||0!=(1&ul.current)?0===Mu&&(Mu=3):vs())),null!==t.updateQueue&&(t.flags|=4),qi(t),null);case 4:return ol(),zi(e,t),null===e&&$r(t.stateNode.containerInfo),qi(t),null;case 10:return xo(t.type._context),qi(t),null;case 19:if(Ea(ul),null===(l=t.memoizedState))return qi(t),null;if(r=0!=(128&t.flags),null===(u=l.rendering))if(r)Qi(l,!1);else{if(0!==Mu||null!==e&&0!=(128&e.flags))for(e=t.child;null!==e;){if(null!==(u=sl(e))){for(t.flags|=128,Qi(l,!1),null!==(r=u.updateQueue)&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;null!==n;)e=r,(l=n).flags&=14680066,null===(u=l.alternate)?(l.childLanes=0,l.lanes=e,l.child=null,l.subtreeFlags=0,l.memoizedProps=null,l.memoizedState=null,l.updateQueue=null,l.dependencies=null,l.stateNode=null):(l.childLanes=u.childLanes,l.lanes=u.lanes,l.child=u.child,l.subtreeFlags=0,l.deletions=null,l.memoizedProps=u.memoizedProps,l.memoizedState=u.memoizedState,l.updateQueue=u.updateQueue,l.type=u.type,e=u.dependencies,l.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return Aa(ul,1&ul.current|2),t.child}e=e.sibling}null!==l.tail&&Xe()>Wu&&(t.flags|=128,r=!0,Qi(l,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=sl(u))){if(t.flags|=128,r=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),Qi(l,!0),null===l.tail&&"hidden"===l.tailMode&&!u.alternate&&!ao)return qi(t),null}else 2*Xe()-l.renderingStartTime>Wu&&1073741824!==n&&(t.flags|=128,r=!0,Qi(l,!1),t.lanes=4194304);l.isBackwards?(u.sibling=t.child,t.child=u):(null!==(n=l.last)?n.sibling=u:t.child=u,l.last=u)}return null!==l.tail?(t=l.tail,l.rendering=t,l.tail=t.sibling,l.renderingStartTime=Xe(),t.sibling=null,n=ul.current,Aa(ul,r?1&n|2:1&n),t):(qi(t),null);case 22:case 23:return ds(),r=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==r&&(t.flags|=8192),r&&0!=(1&t.mode)?0!=(1073741824&zu)&&(qi(t),6&t.subtreeFlags&&(t.flags|=8192)):qi(t),null;case 24:case 25:return null}throw Error(o(156,t.tag))}function Yi(e,t){switch(to(t),t.tag){case 1:return Da(t.type)&&za(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return ol(),Ea(La),Ea(Pa),fl(),0!=(65536&(e=t.flags))&&0==(128&e)?(t.flags=-65537&e|128,t):null;case 5:return il(t),null;case 13:if(Ea(ul),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(o(340));ho()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return Ea(ul),null;case 4:return ol(),null;case 10:return xo(t.type._context),null;case 22:case 23:return ds(),null;default:return null}}Di=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},zi=function(){},Ni=function(e,t,n,r){var a=e.memoizedProps;if(a!==r){e=t.stateNode,rl(el.current);var o,l=null;switch(n){case"input":a=Y(e,a),r=Y(e,r),l=[];break;case"select":a=j({},a,{value:void 0}),r=j({},r,{value:void 0}),l=[];break;case"textarea":a=re(e,a),r=re(e,r),l=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(e.onclick=Zr)}for(c in ye(n,r),n=null,a)if(!r.hasOwnProperty(c)&&a.hasOwnProperty(c)&&null!=a[c])if("style"===c){var u=a[c];for(o in u)u.hasOwnProperty(o)&&(n||(n={}),n[o]="")}else"dangerouslySetInnerHTML"!==c&&"children"!==c&&"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(i.hasOwnProperty(c)?l||(l=[]):(l=l||[]).push(c,null));for(c in r){var s=r[c];if(u=null!=a?a[c]:void 0,r.hasOwnProperty(c)&&s!==u&&(null!=s||null!=u))if("style"===c)if(u){for(o in u)!u.hasOwnProperty(o)||s&&s.hasOwnProperty(o)||(n||(n={}),n[o]="");for(o in s)s.hasOwnProperty(o)&&u[o]!==s[o]&&(n||(n={}),n[o]=s[o])}else n||(l||(l=[]),l.push(c,n)),n=s;else"dangerouslySetInnerHTML"===c?(s=s?s.__html:void 0,u=u?u.__html:void 0,null!=s&&u!==s&&(l=l||[]).push(c,s)):"children"===c?"string"!=typeof s&&"number"!=typeof s||(l=l||[]).push(c,""+s):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&(i.hasOwnProperty(c)?(null!=s&&"onScroll"===c&&Fr("scroll",e),l||u===s||(l=[])):(l=l||[]).push(c,s))}n&&(l=l||[]).push("style",n);var c=l;(t.updateQueue=c)&&(t.flags|=4)}},Mi=function(e,t,n,r){n!==r&&(t.flags|=4)};var Gi=!1,Xi=!1,Ji="function"==typeof WeakSet?WeakSet:Set,Zi=null;function eu(e,t){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){Es(e,t,n)}else n.current=null}function tu(e,t,n){try{n()}catch(n){Es(e,t,n)}}var nu=!1;function ru(e,t,n){var r=t.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var a=r=r.next;do{if((a.tag&e)===e){var o=a.destroy;a.destroy=void 0,void 0!==o&&tu(t,n,o)}a=a.next}while(a!==r)}}function au(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function ou(e){var t=e.ref;if(null!==t){var n=e.stateNode;e.tag,e=n,"function"==typeof t?t(e):t.current=e}}function lu(e){var t=e.alternate;null!==t&&(e.alternate=null,lu(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&(delete t[da],delete t[pa],delete t[ma],delete t[va],delete t[ga]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function iu(e){return 5===e.tag||3===e.tag||4===e.tag}function uu(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||iu(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function su(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Zr));else if(4!==r&&null!==(e=e.child))for(su(e,t,n),e=e.sibling;null!==e;)su(e,t,n),e=e.sibling}function cu(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(cu(e,t,n),e=e.sibling;null!==e;)cu(e,t,n),e=e.sibling}var fu=null,du=!1;function pu(e,t,n){for(n=n.child;null!==n;)hu(e,t,n),n=n.sibling}function hu(e,t,n){if(ot&&"function"==typeof ot.onCommitFiberUnmount)try{ot.onCommitFiberUnmount(at,n)}catch(e){}switch(n.tag){case 5:Xi||eu(n,t);case 6:var r=fu,a=du;fu=null,pu(e,t,n),du=a,null!==(fu=r)&&(du?(e=fu,n=n.stateNode,8===e.nodeType?e.parentNode.removeChild(n):e.removeChild(n)):fu.removeChild(n.stateNode));break;case 18:null!==fu&&(du?(e=fu,n=n.stateNode,8===e.nodeType?ua(e.parentNode,n):1===e.nodeType&&ua(e,n),$t(e)):ua(fu,n.stateNode));break;case 4:r=fu,a=du,fu=n.stateNode.containerInfo,du=!0,pu(e,t,n),fu=r,du=a;break;case 0:case 11:case 14:case 15:if(!Xi&&null!==(r=n.updateQueue)&&null!==(r=r.lastEffect)){a=r=r.next;do{var o=a,l=o.destroy;o=o.tag,void 0!==l&&(0!=(2&o)||0!=(4&o))&&tu(n,t,l),a=a.next}while(a!==r)}pu(e,t,n);break;case 1:if(!Xi&&(eu(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(e){Es(n,t,e)}pu(e,t,n);break;case 21:pu(e,t,n);break;case 22:1&n.mode?(Xi=(r=Xi)||null!==n.memoizedState,pu(e,t,n),Xi=r):pu(e,t,n);break;default:pu(e,t,n)}}function mu(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Ji),t.forEach((function(t){var r=Ls.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function vu(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var a=n[r];try{var l=e,i=t,u=i;e:for(;null!==u;){switch(u.tag){case 5:fu=u.stateNode,du=!1;break e;case 3:case 4:fu=u.stateNode.containerInfo,du=!0;break e}u=u.return}if(null===fu)throw Error(o(160));hu(l,i,a),fu=null,du=!1;var s=a.alternate;null!==s&&(s.return=null),a.return=null}catch(e){Es(a,t,e)}}if(12854&t.subtreeFlags)for(t=t.child;null!==t;)gu(t,e),t=t.sibling}function gu(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(vu(t,e),yu(e),4&r){try{ru(3,e,e.return),au(3,e)}catch(t){Es(e,e.return,t)}try{ru(5,e,e.return)}catch(t){Es(e,e.return,t)}}break;case 1:vu(t,e),yu(e),512&r&&null!==n&&eu(n,n.return);break;case 5:if(vu(t,e),yu(e),512&r&&null!==n&&eu(n,n.return),32&e.flags){var a=e.stateNode;try{de(a,"")}catch(t){Es(e,e.return,t)}}if(4&r&&null!=(a=e.stateNode)){var l=e.memoizedProps,i=null!==n?n.memoizedProps:l,u=e.type,s=e.updateQueue;if(e.updateQueue=null,null!==s)try{"input"===u&&"radio"===l.type&&null!=l.name&&X(a,l),be(u,i);var c=be(u,l);for(i=0;i<s.length;i+=2){var f=s[i],d=s[i+1];"style"===f?ve(a,d):"dangerouslySetInnerHTML"===f?fe(a,d):"children"===f?de(a,d):b(a,f,d,c)}switch(u){case"input":J(a,l);break;case"textarea":oe(a,l);break;case"select":var p=a._wrapperState.wasMultiple;a._wrapperState.wasMultiple=!!l.multiple;var h=l.value;null!=h?ne(a,!!l.multiple,h,!1):p!==!!l.multiple&&(null!=l.defaultValue?ne(a,!!l.multiple,l.defaultValue,!0):ne(a,!!l.multiple,l.multiple?[]:"",!1))}a[pa]=l}catch(t){Es(e,e.return,t)}}break;case 6:if(vu(t,e),yu(e),4&r){if(null===e.stateNode)throw Error(o(162));a=e.stateNode,l=e.memoizedProps;try{a.nodeValue=l}catch(t){Es(e,e.return,t)}}break;case 3:if(vu(t,e),yu(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{$t(t.containerInfo)}catch(t){Es(e,e.return,t)}break;case 4:default:vu(t,e),yu(e);break;case 13:vu(t,e),yu(e),8192&(a=e.child).flags&&(l=null!==a.memoizedState,a.stateNode.isHidden=l,!l||null!==a.alternate&&null!==a.alternate.memoizedState||($u=Xe())),4&r&&mu(e);break;case 22:if(f=null!==n&&null!==n.memoizedState,1&e.mode?(Xi=(c=Xi)||f,vu(t,e),Xi=c):vu(t,e),yu(e),8192&r){if(c=null!==e.memoizedState,(e.stateNode.isHidden=c)&&!f&&0!=(1&e.mode))for(Zi=e,f=e.child;null!==f;){for(d=Zi=f;null!==Zi;){switch(h=(p=Zi).child,p.tag){case 0:case 11:case 14:case 15:ru(4,p,p.return);break;case 1:eu(p,p.return);var m=p.stateNode;if("function"==typeof m.componentWillUnmount){r=p,n=p.return;try{t=r,m.props=t.memoizedProps,m.state=t.memoizedState,m.componentWillUnmount()}catch(e){Es(r,n,e)}}break;case 5:eu(p,p.return);break;case 22:if(null!==p.memoizedState){Su(d);continue}}null!==h?(h.return=p,Zi=h):Su(d)}f=f.sibling}e:for(f=null,d=e;;){if(5===d.tag){if(null===f){f=d;try{a=d.stateNode,c?"function"==typeof(l=a.style).setProperty?l.setProperty("display","none","important"):l.display="none":(u=d.stateNode,i=null!=(s=d.memoizedProps.style)&&s.hasOwnProperty("display")?s.display:null,u.style.display=me("display",i))}catch(t){Es(e,e.return,t)}}}else if(6===d.tag){if(null===f)try{d.stateNode.nodeValue=c?"":d.memoizedProps}catch(t){Es(e,e.return,t)}}else if((22!==d.tag&&23!==d.tag||null===d.memoizedState||d===e)&&null!==d.child){d.child.return=d,d=d.child;continue}if(d===e)break e;for(;null===d.sibling;){if(null===d.return||d.return===e)break e;f===d&&(f=null),d=d.return}f===d&&(f=null),d.sibling.return=d.return,d=d.sibling}}break;case 19:vu(t,e),yu(e),4&r&&mu(e);case 21:}}function yu(e){var t=e.flags;if(2&t){try{e:{for(var n=e.return;null!==n;){if(iu(n)){var r=n;break e}n=n.return}throw Error(o(160))}switch(r.tag){case 5:var a=r.stateNode;32&r.flags&&(de(a,""),r.flags&=-33),cu(e,uu(e),a);break;case 3:case 4:var l=r.stateNode.containerInfo;su(e,uu(e),l);break;default:throw Error(o(161))}}catch(t){Es(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function bu(e,t,n){Zi=e,wu(e,t,n)}function wu(e,t,n){for(var r=0!=(1&e.mode);null!==Zi;){var a=Zi,o=a.child;if(22===a.tag&&r){var l=null!==a.memoizedState||Gi;if(!l){var i=a.alternate,u=null!==i&&null!==i.memoizedState||Xi;i=Gi;var s=Xi;if(Gi=l,(Xi=u)&&!s)for(Zi=a;null!==Zi;)u=(l=Zi).child,22===l.tag&&null!==l.memoizedState?xu(a):null!==u?(u.return=l,Zi=u):xu(a);for(;null!==o;)Zi=o,wu(o,t,n),o=o.sibling;Zi=a,Gi=i,Xi=s}ku(e)}else 0!=(8772&a.subtreeFlags)&&null!==o?(o.return=a,Zi=o):ku(e)}}function ku(e){for(;null!==Zi;){var t=Zi;if(0!=(8772&t.flags)){var n=t.alternate;try{if(0!=(8772&t.flags))switch(t.tag){case 0:case 11:case 15:Xi||au(5,t);break;case 1:var r=t.stateNode;if(4&t.flags&&!Xi)if(null===n)r.componentDidMount();else{var a=t.elementType===t.type?n.memoizedProps:go(t.type,n.memoizedProps);r.componentDidUpdate(a,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var l=t.updateQueue;null!==l&&Fo(t,l,r);break;case 3:var i=t.updateQueue;if(null!==i){if(n=null,null!==t.child)switch(t.child.tag){case 5:case 1:n=t.child.stateNode}Fo(t,i,n)}break;case 5:var u=t.stateNode;if(null===n&&4&t.flags){n=u;var s=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":s.autoFocus&&n.focus();break;case"img":s.src&&(n.src=s.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===t.memoizedState){var c=t.alternate;if(null!==c){var f=c.memoizedState;if(null!==f){var d=f.dehydrated;null!==d&&$t(d)}}}break;default:throw Error(o(163))}Xi||512&t.flags&&ou(t)}catch(e){Es(t,t.return,e)}}if(t===e){Zi=null;break}if(null!==(n=t.sibling)){n.return=t.return,Zi=n;break}Zi=t.return}}function Su(e){for(;null!==Zi;){var t=Zi;if(t===e){Zi=null;break}var n=t.sibling;if(null!==n){n.return=t.return,Zi=n;break}Zi=t.return}}function xu(e){for(;null!==Zi;){var t=Zi;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{au(4,t)}catch(e){Es(t,n,e)}break;case 1:var r=t.stateNode;if("function"==typeof r.componentDidMount){var a=t.return;try{r.componentDidMount()}catch(e){Es(t,a,e)}}var o=t.return;try{ou(t)}catch(e){Es(t,o,e)}break;case 5:var l=t.return;try{ou(t)}catch(e){Es(t,l,e)}}}catch(e){Es(t,t.return,e)}if(t===e){Zi=null;break}var i=t.sibling;if(null!==i){i.return=t.return,Zi=i;break}Zi=t.return}}var Cu,Eu=Math.ceil,Au=w.ReactCurrentDispatcher,_u=w.ReactCurrentOwner,Pu=w.ReactCurrentBatchConfig,Lu=0,Tu=null,Ru=null,Du=0,zu=0,Nu=Ca(0),Mu=0,Ou=null,ju=0,Uu=0,Fu=0,Iu=null,Bu=null,$u=0,Wu=1/0,Vu=null,Hu=!1,Qu=null,qu=null,Ku=!1,Yu=null,Gu=0,Xu=0,Ju=null,Zu=-1,es=0;function ts(){return 0!=(6&Lu)?Xe():-1!==Zu?Zu:Zu=Xe()}function ns(e){return 0==(1&e.mode)?1:0!=(2&Lu)&&0!==Du?Du&-Du:null!==vo.transition?(0===es&&(es=mt()),es):0!==(e=bt)?e:e=void 0===(e=window.event)?16:Gt(e.type)}function rs(e,t,n,r){if(50<Xu)throw Xu=0,Ju=null,Error(o(185));gt(e,n,r),0!=(2&Lu)&&e===Tu||(e===Tu&&(0==(2&Lu)&&(Uu|=n),4===Mu&&us(e,Du)),as(e,r),1===n&&0===Lu&&0==(1&t.mode)&&(Wu=Xe()+500,Fa&&$a()))}function as(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,a=e.expirationTimes,o=e.pendingLanes;0<o;){var l=31-lt(o),i=1<<l,u=a[l];-1===u?0!=(i&n)&&0==(i&r)||(a[l]=pt(i,t)):u<=t&&(e.expiredLanes|=i),o&=~i}}(e,t);var r=dt(e,e===Tu?Du:0);if(0===r)null!==n&&Ke(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(null!=n&&Ke(n),1===t)0===e.tag?function(e){Fa=!0,Ba(e)}(ss.bind(null,e)):Ba(ss.bind(null,e)),la((function(){0==(6&Lu)&&$a()})),n=null;else{switch(wt(r)){case 1:n=Ze;break;case 4:n=et;break;case 16:default:n=tt;break;case 536870912:n=rt}n=Ts(n,os.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function os(e,t){if(Zu=-1,es=0,0!=(6&Lu))throw Error(o(327));var n=e.callbackNode;if(xs()&&e.callbackNode!==n)return null;var r=dt(e,e===Tu?Du:0);if(0===r)return null;if(0!=(30&r)||0!=(r&e.expiredLanes)||t)t=gs(e,r);else{t=r;var a=Lu;Lu|=2;var l=ms();for(Tu===e&&Du===t||(Vu=null,Wu=Xe()+500,ps(e,t));;)try{bs();break}catch(t){hs(e,t)}So(),Au.current=l,Lu=a,null!==Ru?t=0:(Tu=null,Du=0,t=Mu)}if(0!==t){if(2===t&&0!==(a=ht(e))&&(r=a,t=ls(e,a)),1===t)throw n=Ou,ps(e,0),us(e,r),as(e,Xe()),n;if(6===t)us(e,r);else{if(a=e.current.alternate,0==(30&r)&&!function(e){for(var t=e;;){if(16384&t.flags){var n=t.updateQueue;if(null!==n&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var a=n[r],o=a.getSnapshot;a=a.value;try{if(!ir(o(),a))return!1}catch(e){return!1}}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(a)&&(2===(t=gs(e,r))&&0!==(l=ht(e))&&(r=l,t=ls(e,l)),1===t))throw n=Ou,ps(e,0),us(e,r),as(e,Xe()),n;switch(e.finishedWork=a,e.finishedLanes=r,t){case 0:case 1:throw Error(o(345));case 2:case 5:Ss(e,Bu,Vu);break;case 3:if(us(e,r),(130023424&r)===r&&10<(t=$u+500-Xe())){if(0!==dt(e,0))break;if(((a=e.suspendedLanes)&r)!==r){ts(),e.pingedLanes|=e.suspendedLanes&a;break}e.timeoutHandle=ra(Ss.bind(null,e,Bu,Vu),t);break}Ss(e,Bu,Vu);break;case 4:if(us(e,r),(4194240&r)===r)break;for(t=e.eventTimes,a=-1;0<r;){var i=31-lt(r);l=1<<i,(i=t[i])>a&&(a=i),r&=~l}if(r=a,10<(r=(120>(r=Xe()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*Eu(r/1960))-r)){e.timeoutHandle=ra(Ss.bind(null,e,Bu,Vu),r);break}Ss(e,Bu,Vu);break;default:throw Error(o(329))}}}return as(e,Xe()),e.callbackNode===n?os.bind(null,e):null}function ls(e,t){var n=Iu;return e.current.memoizedState.isDehydrated&&(ps(e,t).flags|=256),2!==(e=gs(e,t))&&(t=Bu,Bu=n,null!==t&&is(t)),e}function is(e){null===Bu?Bu=e:Bu.push.apply(Bu,e)}function us(e,t){for(t&=~Fu,t&=~Uu,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-lt(t),r=1<<n;e[n]=-1,t&=~r}}function ss(e){if(0!=(6&Lu))throw Error(o(327));xs();var t=dt(e,0);if(0==(1&t))return as(e,Xe()),null;var n=gs(e,t);if(0!==e.tag&&2===n){var r=ht(e);0!==r&&(t=r,n=ls(e,r))}if(1===n)throw n=Ou,ps(e,0),us(e,t),as(e,Xe()),n;if(6===n)throw Error(o(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,Ss(e,Bu,Vu),as(e,Xe()),null}function cs(e,t){var n=Lu;Lu|=1;try{return e(t)}finally{0===(Lu=n)&&(Wu=Xe()+500,Fa&&$a())}}function fs(e){null!==Yu&&0===Yu.tag&&0==(6&Lu)&&xs();var t=Lu;Lu|=1;var n=Pu.transition,r=bt;try{if(Pu.transition=null,bt=1,e)return e()}finally{bt=r,Pu.transition=n,0==(6&(Lu=t))&&$a()}}function ds(){zu=Nu.current,Ea(Nu)}function ps(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,aa(n)),null!==Ru)for(n=Ru.return;null!==n;){var r=n;switch(to(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&za();break;case 3:ol(),Ea(La),Ea(Pa),fl();break;case 5:il(r);break;case 4:ol();break;case 13:case 19:Ea(ul);break;case 10:xo(r.type._context);break;case 22:case 23:ds()}n=n.return}if(Tu=e,Ru=e=Ns(e.current,null),Du=zu=t,Mu=0,Ou=null,Fu=Uu=ju=0,Bu=Iu=null,null!==_o){for(t=0;t<_o.length;t++)if(null!==(r=(n=_o[t]).interleaved)){n.interleaved=null;var a=r.next,o=n.pending;if(null!==o){var l=o.next;o.next=a,r.next=l}n.pending=r}_o=null}return e}function hs(e,t){for(;;){var n=Ru;try{if(So(),dl.current=li,yl){for(var r=ml.memoizedState;null!==r;){var a=r.queue;null!==a&&(a.pending=null),r=r.next}yl=!1}if(hl=0,gl=vl=ml=null,bl=!1,wl=0,_u.current=null,null===n||null===n.return){Mu=1,Ou=t,Ru=null;break}e:{var l=e,i=n.return,u=n,s=t;if(t=Du,u.flags|=32768,null!==s&&"object"==typeof s&&"function"==typeof s.then){var c=s,f=u,d=f.tag;if(0==(1&f.mode)&&(0===d||11===d||15===d)){var p=f.alternate;p?(f.updateQueue=p.updateQueue,f.memoizedState=p.memoizedState,f.lanes=p.lanes):(f.updateQueue=null,f.memoizedState=null)}var h=gi(i);if(null!==h){h.flags&=-257,yi(h,i,u,0,t),1&h.mode&&vi(l,c,t),s=c;var m=(t=h).updateQueue;if(null===m){var v=new Set;v.add(s),t.updateQueue=v}else m.add(s);break e}if(0==(1&t)){vi(l,c,t),vs();break e}s=Error(o(426))}else if(ao&&1&u.mode){var g=gi(i);if(null!==g){0==(65536&g.flags)&&(g.flags|=256),yi(g,i,u,0,t),mo(ci(s,u));break e}}l=s=ci(s,u),4!==Mu&&(Mu=2),null===Iu?Iu=[l]:Iu.push(l),l=i;do{switch(l.tag){case 3:l.flags|=65536,t&=-t,l.lanes|=t,jo(l,hi(0,s,t));break e;case 1:u=s;var y=l.type,b=l.stateNode;if(0==(128&l.flags)&&("function"==typeof y.getDerivedStateFromError||null!==b&&"function"==typeof b.componentDidCatch&&(null===qu||!qu.has(b)))){l.flags|=65536,t&=-t,l.lanes|=t,jo(l,mi(l,u,t));break e}}l=l.return}while(null!==l)}ks(n)}catch(e){t=e,Ru===n&&null!==n&&(Ru=n=n.return);continue}break}}function ms(){var e=Au.current;return Au.current=li,null===e?li:e}function vs(){0!==Mu&&3!==Mu&&2!==Mu||(Mu=4),null===Tu||0==(268435455&ju)&&0==(268435455&Uu)||us(Tu,Du)}function gs(e,t){var n=Lu;Lu|=2;var r=ms();for(Tu===e&&Du===t||(Vu=null,ps(e,t));;)try{ys();break}catch(t){hs(e,t)}if(So(),Lu=n,Au.current=r,null!==Ru)throw Error(o(261));return Tu=null,Du=0,Mu}function ys(){for(;null!==Ru;)ws(Ru)}function bs(){for(;null!==Ru&&!Ye();)ws(Ru)}function ws(e){var t=Cu(e.alternate,e,zu);e.memoizedProps=e.pendingProps,null===t?ks(e):Ru=t,_u.current=null}function ks(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(32768&t.flags)){if(null!==(n=Ki(n,t,zu)))return void(Ru=n)}else{if(null!==(n=Yi(n,t)))return n.flags&=32767,void(Ru=n);if(null===e)return Mu=6,void(Ru=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}if(null!==(t=t.sibling))return void(Ru=t);Ru=t=e}while(null!==t);0===Mu&&(Mu=5)}function Ss(e,t,n){var r=bt,a=Pu.transition;try{Pu.transition=null,bt=1,function(e,t,n,r){do{xs()}while(null!==Yu);if(0!=(6&Lu))throw Error(o(327));n=e.finishedWork;var a=e.finishedLanes;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(o(177));e.callbackNode=null,e.callbackPriority=0;var l=n.lanes|n.childLanes;if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var a=31-lt(n),o=1<<a;t[a]=0,r[a]=-1,e[a]=-1,n&=~o}}(e,l),e===Tu&&(Ru=Tu=null,Du=0),0==(2064&n.subtreeFlags)&&0==(2064&n.flags)||Ku||(Ku=!0,Ts(tt,(function(){return xs(),null}))),l=0!=(15990&n.flags),0!=(15990&n.subtreeFlags)||l){l=Pu.transition,Pu.transition=null;var i=bt;bt=1;var u=Lu;Lu|=4,_u.current=null,function(e,t){if(ea=Vt,pr(e=dr())){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var a=r.anchorOffset,l=r.focusNode;r=r.focusOffset;try{n.nodeType,l.nodeType}catch(e){n=null;break e}var i=0,u=-1,s=-1,c=0,f=0,d=e,p=null;t:for(;;){for(var h;d!==n||0!==a&&3!==d.nodeType||(u=i+a),d!==l||0!==r&&3!==d.nodeType||(s=i+r),3===d.nodeType&&(i+=d.nodeValue.length),null!==(h=d.firstChild);)p=d,d=h;for(;;){if(d===e)break t;if(p===n&&++c===a&&(u=i),p===l&&++f===r&&(s=i),null!==(h=d.nextSibling))break;p=(d=p).parentNode}d=h}n=-1===u||-1===s?null:{start:u,end:s}}else n=null}n=n||{start:0,end:0}}else n=null;for(ta={focusedElem:e,selectionRange:n},Vt=!1,Zi=t;null!==Zi;)if(e=(t=Zi).child,0!=(1028&t.subtreeFlags)&&null!==e)e.return=t,Zi=e;else for(;null!==Zi;){t=Zi;try{var m=t.alternate;if(0!=(1024&t.flags))switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==m){var v=m.memoizedProps,g=m.memoizedState,y=t.stateNode,b=y.getSnapshotBeforeUpdate(t.elementType===t.type?v:go(t.type,v),g);y.__reactInternalSnapshotBeforeUpdate=b}break;case 3:var w=t.stateNode.containerInfo;1===w.nodeType?w.textContent="":9===w.nodeType&&w.documentElement&&w.removeChild(w.documentElement);break;default:throw Error(o(163))}}catch(e){Es(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Zi=e;break}Zi=t.return}m=nu,nu=!1}(e,n),gu(n,e),hr(ta),Vt=!!ea,ta=ea=null,e.current=n,bu(n,e,a),Ge(),Lu=u,bt=i,Pu.transition=l}else e.current=n;if(Ku&&(Ku=!1,Yu=e,Gu=a),0===(l=e.pendingLanes)&&(qu=null),function(e){if(ot&&"function"==typeof ot.onCommitFiberRoot)try{ot.onCommitFiberRoot(at,e,void 0,128==(128&e.current.flags))}catch(e){}}(n.stateNode),as(e,Xe()),null!==t)for(r=e.onRecoverableError,n=0;n<t.length;n++)r((a=t[n]).value,{componentStack:a.stack,digest:a.digest});if(Hu)throw Hu=!1,e=Qu,Qu=null,e;0!=(1&Gu)&&0!==e.tag&&xs(),0!=(1&(l=e.pendingLanes))?e===Ju?Xu++:(Xu=0,Ju=e):Xu=0,$a()}(e,t,n,r)}finally{Pu.transition=a,bt=r}return null}function xs(){if(null!==Yu){var e=wt(Gu),t=Pu.transition,n=bt;try{if(Pu.transition=null,bt=16>e?16:e,null===Yu)var r=!1;else{if(e=Yu,Yu=null,Gu=0,0!=(6&Lu))throw Error(o(331));var a=Lu;for(Lu|=4,Zi=e.current;null!==Zi;){var l=Zi,i=l.child;if(0!=(16&Zi.flags)){var u=l.deletions;if(null!==u){for(var s=0;s<u.length;s++){var c=u[s];for(Zi=c;null!==Zi;){var f=Zi;switch(f.tag){case 0:case 11:case 15:ru(8,f,l)}var d=f.child;if(null!==d)d.return=f,Zi=d;else for(;null!==Zi;){var p=(f=Zi).sibling,h=f.return;if(lu(f),f===c){Zi=null;break}if(null!==p){p.return=h,Zi=p;break}Zi=h}}}var m=l.alternate;if(null!==m){var v=m.child;if(null!==v){m.child=null;do{var g=v.sibling;v.sibling=null,v=g}while(null!==v)}}Zi=l}}if(0!=(2064&l.subtreeFlags)&&null!==i)i.return=l,Zi=i;else e:for(;null!==Zi;){if(0!=(2048&(l=Zi).flags))switch(l.tag){case 0:case 11:case 15:ru(9,l,l.return)}var y=l.sibling;if(null!==y){y.return=l.return,Zi=y;break e}Zi=l.return}}var b=e.current;for(Zi=b;null!==Zi;){var w=(i=Zi).child;if(0!=(2064&i.subtreeFlags)&&null!==w)w.return=i,Zi=w;else e:for(i=b;null!==Zi;){if(0!=(2048&(u=Zi).flags))try{switch(u.tag){case 0:case 11:case 15:au(9,u)}}catch(e){Es(u,u.return,e)}if(u===i){Zi=null;break e}var k=u.sibling;if(null!==k){k.return=u.return,Zi=k;break e}Zi=u.return}}if(Lu=a,$a(),ot&&"function"==typeof ot.onPostCommitFiberRoot)try{ot.onPostCommitFiberRoot(at,e)}catch(e){}r=!0}return r}finally{bt=n,Pu.transition=t}}return!1}function Cs(e,t,n){e=Mo(e,t=hi(0,t=ci(n,t),1),1),t=ts(),null!==e&&(gt(e,1,t),as(e,t))}function Es(e,t,n){if(3===e.tag)Cs(e,e,n);else for(;null!==t;){if(3===t.tag){Cs(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===qu||!qu.has(r))){t=Mo(t,e=mi(t,e=ci(n,e),1),1),e=ts(),null!==t&&(gt(t,1,e),as(t,e));break}}t=t.return}}function As(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=ts(),e.pingedLanes|=e.suspendedLanes&n,Tu===e&&(Du&n)===n&&(4===Mu||3===Mu&&(130023424&Du)===Du&&500>Xe()-$u?ps(e,0):Fu|=n),as(e,t)}function _s(e,t){0===t&&(0==(1&e.mode)?t=1:(t=ct,0==(130023424&(ct<<=1))&&(ct=4194304)));var n=ts();null!==(e=To(e,t))&&(gt(e,t,n),as(e,n))}function Ps(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),_s(e,n)}function Ls(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,a=e.memoizedState;null!==a&&(n=a.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(o(314))}null!==r&&r.delete(t),_s(e,n)}function Ts(e,t){return qe(e,t)}function Rs(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Ds(e,t,n,r){return new Rs(e,t,n,r)}function zs(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Ns(e,t){var n=e.alternate;return null===n?((n=Ds(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Ms(e,t,n,r,a,l){var i=2;if(r=e,"function"==typeof e)zs(e)&&(i=1);else if("string"==typeof e)i=5;else e:switch(e){case x:return Os(n.children,a,l,t);case C:i=8,a|=8;break;case E:return(e=Ds(12,n,t,2|a)).elementType=E,e.lanes=l,e;case L:return(e=Ds(13,n,t,a)).elementType=L,e.lanes=l,e;case T:return(e=Ds(19,n,t,a)).elementType=T,e.lanes=l,e;case z:return js(n,a,l,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case A:i=10;break e;case _:i=9;break e;case P:i=11;break e;case R:i=14;break e;case D:i=16,r=null;break e}throw Error(o(130,null==e?e:typeof e,""))}return(t=Ds(i,n,t,a)).elementType=e,t.type=r,t.lanes=l,t}function Os(e,t,n,r){return(e=Ds(7,e,r,t)).lanes=n,e}function js(e,t,n,r){return(e=Ds(22,e,r,t)).elementType=z,e.lanes=n,e.stateNode={isHidden:!1},e}function Us(e,t,n){return(e=Ds(6,e,null,t)).lanes=n,e}function Fs(e,t,n){return(t=Ds(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Is(e,t,n,r,a){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=vt(0),this.expirationTimes=vt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=vt(0),this.identifierPrefix=r,this.onRecoverableError=a,this.mutableSourceEagerHydrationData=null}function Bs(e,t,n,r,a,o,l,i,u){return e=new Is(e,t,n,i,u),1===t?(t=1,!0===o&&(t|=8)):t=0,o=Ds(3,null,null,t),e.current=o,o.stateNode=e,o.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},Do(o),e}function $s(e){if(!e)return _a;e:{if($e(e=e._reactInternals)!==e||1!==e.tag)throw Error(o(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(Da(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(o(171))}if(1===e.tag){var n=e.type;if(Da(n))return Ma(e,n,t)}return t}function Ws(e,t,n,r,a,o,l,i,u){return(e=Bs(n,r,!0,e,0,o,0,i,u)).context=$s(null),n=e.current,(o=No(r=ts(),a=ns(n))).callback=null!=t?t:null,Mo(n,o,a),e.current.lanes=a,gt(e,a,r),as(e,r),e}function Vs(e,t,n,r){var a=t.current,o=ts(),l=ns(a);return n=$s(n),null===t.context?t.context=n:t.pendingContext=n,(t=No(o,l)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),null!==(e=Mo(a,t,l))&&(rs(e,a,l,o),Oo(e,a,l)),l}function Hs(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Qs(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function qs(e,t){Qs(e,t),(e=e.alternate)&&Qs(e,t)}Cu=function(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps||La.current)wi=!0;else{if(0==(e.lanes&n)&&0==(128&t.flags))return wi=!1,function(e,t,n){switch(t.tag){case 3:Ti(t),ho();break;case 5:ll(t);break;case 1:Da(t.type)&&Oa(t);break;case 4:al(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,a=t.memoizedProps.value;Aa(yo,r._currentValue),r._currentValue=a;break;case 13:if(null!==(r=t.memoizedState))return null!==r.dehydrated?(Aa(ul,1&ul.current),t.flags|=128,null):0!=(n&t.child.childLanes)?Ui(e,t,n):(Aa(ul,1&ul.current),null!==(e=Hi(e,t,n))?e.sibling:null);Aa(ul,1&ul.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(128&e.flags)){if(r)return Wi(e,t,n);t.flags|=128}if(null!==(a=t.memoizedState)&&(a.rendering=null,a.tail=null,a.lastEffect=null),Aa(ul,ul.current),r)break;return null;case 22:case 23:return t.lanes=0,Ei(e,t,n)}return Hi(e,t,n)}(e,t,n);wi=0!=(131072&e.flags)}else wi=!1,ao&&0!=(1048576&t.flags)&&Za(t,Qa,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;Vi(e,t),e=t.pendingProps;var a=Ra(t,Pa.current);Eo(t,n),a=Cl(null,t,r,e,a,n);var l=El();return t.flags|=1,"object"==typeof a&&null!==a&&"function"==typeof a.render&&void 0===a.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,Da(r)?(l=!0,Oa(t)):l=!1,t.memoizedState=null!==a.state&&void 0!==a.state?a.state:null,Do(t),a.updater=$o,t.stateNode=a,a._reactInternals=t,Qo(t,r,e,n),t=Li(null,t,r,!0,l,n)):(t.tag=0,ao&&l&&eo(t),ki(null,t,a,n),t=t.child),t;case 16:r=t.elementType;e:{switch(Vi(e,t),e=t.pendingProps,r=(a=r._init)(r._payload),t.type=r,a=t.tag=function(e){if("function"==typeof e)return zs(e)?1:0;if(null!=e){if((e=e.$$typeof)===P)return 11;if(e===R)return 14}return 2}(r),e=go(r,e),a){case 0:t=_i(null,t,r,e,n);break e;case 1:t=Pi(null,t,r,e,n);break e;case 11:t=Si(null,t,r,e,n);break e;case 14:t=xi(null,t,r,go(r.type,e),n);break e}throw Error(o(306,r,""))}return t;case 0:return r=t.type,a=t.pendingProps,_i(e,t,r,a=t.elementType===r?a:go(r,a),n);case 1:return r=t.type,a=t.pendingProps,Pi(e,t,r,a=t.elementType===r?a:go(r,a),n);case 3:e:{if(Ti(t),null===e)throw Error(o(387));r=t.pendingProps,a=(l=t.memoizedState).element,zo(e,t),Uo(t,r,null,n);var i=t.memoizedState;if(r=i.element,l.isDehydrated){if(l={element:r,isDehydrated:!1,cache:i.cache,pendingSuspenseBoundaries:i.pendingSuspenseBoundaries,transitions:i.transitions},t.updateQueue.baseState=l,t.memoizedState=l,256&t.flags){t=Ri(e,t,r,n,a=ci(Error(o(423)),t));break e}if(r!==a){t=Ri(e,t,r,n,a=ci(Error(o(424)),t));break e}for(ro=sa(t.stateNode.containerInfo.firstChild),no=t,ao=!0,oo=null,n=Jo(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(ho(),r===a){t=Hi(e,t,n);break e}ki(e,t,r,n)}t=t.child}return t;case 5:return ll(t),null===e&&so(t),r=t.type,a=t.pendingProps,l=null!==e?e.memoizedProps:null,i=a.children,na(r,a)?i=null:null!==l&&na(r,l)&&(t.flags|=32),Ai(e,t),ki(e,t,i,n),t.child;case 6:return null===e&&so(t),null;case 13:return Ui(e,t,n);case 4:return al(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Xo(t,null,r,n):ki(e,t,r,n),t.child;case 11:return r=t.type,a=t.pendingProps,Si(e,t,r,a=t.elementType===r?a:go(r,a),n);case 7:return ki(e,t,t.pendingProps,n),t.child;case 8:case 12:return ki(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,a=t.pendingProps,l=t.memoizedProps,i=a.value,Aa(yo,r._currentValue),r._currentValue=i,null!==l)if(ir(l.value,i)){if(l.children===a.children&&!La.current){t=Hi(e,t,n);break e}}else for(null!==(l=t.child)&&(l.return=t);null!==l;){var u=l.dependencies;if(null!==u){i=l.child;for(var s=u.firstContext;null!==s;){if(s.context===r){if(1===l.tag){(s=No(-1,n&-n)).tag=2;var c=l.updateQueue;if(null!==c){var f=(c=c.shared).pending;null===f?s.next=s:(s.next=f.next,f.next=s),c.pending=s}}l.lanes|=n,null!==(s=l.alternate)&&(s.lanes|=n),Co(l.return,n,t),u.lanes|=n;break}s=s.next}}else if(10===l.tag)i=l.type===t.type?null:l.child;else if(18===l.tag){if(null===(i=l.return))throw Error(o(341));i.lanes|=n,null!==(u=i.alternate)&&(u.lanes|=n),Co(i,n,t),i=l.sibling}else i=l.child;if(null!==i)i.return=l;else for(i=l;null!==i;){if(i===t){i=null;break}if(null!==(l=i.sibling)){l.return=i.return,i=l;break}i=i.return}l=i}ki(e,t,a.children,n),t=t.child}return t;case 9:return a=t.type,r=t.pendingProps.children,Eo(t,n),r=r(a=Ao(a)),t.flags|=1,ki(e,t,r,n),t.child;case 14:return a=go(r=t.type,t.pendingProps),xi(e,t,r,a=go(r.type,a),n);case 15:return Ci(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,a=t.pendingProps,a=t.elementType===r?a:go(r,a),Vi(e,t),t.tag=1,Da(r)?(e=!0,Oa(t)):e=!1,Eo(t,n),Vo(t,r,a),Qo(t,r,a,n),Li(null,t,r,!0,e,n);case 19:return Wi(e,t,n);case 22:return Ei(e,t,n)}throw Error(o(156,t.tag))};var Ks="function"==typeof reportError?reportError:function(e){console.error(e)};function Ys(e){this._internalRoot=e}function Gs(e){this._internalRoot=e}function Xs(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Js(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Zs(){}function ec(e,t,n,r,a){var o=n._reactRootContainer;if(o){var l=o;if("function"==typeof a){var i=a;a=function(){var e=Hs(l);i.call(e)}}Vs(t,l,e,a)}else l=function(e,t,n,r,a){if(a){if("function"==typeof r){var o=r;r=function(){var e=Hs(l);o.call(e)}}var l=Ws(t,r,e,0,null,!1,0,"",Zs);return e._reactRootContainer=l,e[ha]=l.current,$r(8===e.nodeType?e.parentNode:e),fs(),l}for(;a=e.lastChild;)e.removeChild(a);if("function"==typeof r){var i=r;r=function(){var e=Hs(u);i.call(e)}}var u=Bs(e,0,!1,null,0,!1,0,"",Zs);return e._reactRootContainer=u,e[ha]=u.current,$r(8===e.nodeType?e.parentNode:e),fs((function(){Vs(t,u,n,r)})),u}(n,t,e,a,r);return Hs(l)}Gs.prototype.render=Ys.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(o(409));Vs(e,t,null,null)},Gs.prototype.unmount=Ys.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;fs((function(){Vs(null,e,null,null)})),t[ha]=null}},Gs.prototype.unstable_scheduleHydration=function(e){if(e){var t=Ct();e={blockedOn:null,target:e,priority:t};for(var n=0;n<zt.length&&0!==t&&t<zt[n].priority;n++);zt.splice(n,0,e),0===n&&jt(e)}},kt=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=ft(t.pendingLanes);0!==n&&(yt(t,1|n),as(t,Xe()),0==(6&Lu)&&(Wu=Xe()+500,$a()))}break;case 13:fs((function(){var t=To(e,1);if(null!==t){var n=ts();rs(t,e,1,n)}})),qs(e,1)}},St=function(e){if(13===e.tag){var t=To(e,134217728);null!==t&&rs(t,e,134217728,ts()),qs(e,134217728)}},xt=function(e){if(13===e.tag){var t=ns(e),n=To(e,t);null!==n&&rs(n,e,t,ts()),qs(e,t)}},Ct=function(){return bt},Et=function(e,t){var n=bt;try{return bt=e,t()}finally{bt=n}},Se=function(e,t,n){switch(t){case"input":if(J(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var a=ka(r);if(!a)throw Error(o(90));q(r),J(r,a)}}}break;case"textarea":oe(e,n);break;case"select":null!=(t=n.value)&&ne(e,!!n.multiple,t,!1)}},Pe=cs,Le=fs;var tc={usingClientEntryPoint:!1,Events:[ba,wa,ka,Ae,_e,cs]},nc={findFiberByHostInstance:ya,bundleType:0,version:"18.2.0",rendererPackageName:"react-dom"},rc={bundleType:nc.bundleType,version:nc.version,rendererPackageName:nc.rendererPackageName,rendererConfig:nc.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:w.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=He(e))?null:e.stateNode},findFiberByHostInstance:nc.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.2.0-next-9e3b772b8-20220608"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var ac=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!ac.isDisabled&&ac.supportsFiber)try{at=ac.inject(rc),ot=ac}catch(ce){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=tc,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Xs(t))throw Error(o(200));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:S,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)},t.createRoot=function(e,t){if(!Xs(e))throw Error(o(299));var n=!1,r="",a=Ks;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onRecoverableError&&(a=t.onRecoverableError)),t=Bs(e,1,!1,null,0,n,0,r,a),e[ha]=t.current,$r(8===e.nodeType?e.parentNode:e),new Ys(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(o(188));throw e=Object.keys(e).join(","),Error(o(268,e))}return null===(e=He(t))?null:e.stateNode},t.flushSync=function(e){return fs(e)},t.hydrate=function(e,t,n){if(!Js(t))throw Error(o(200));return ec(null,e,t,!0,n)},t.hydrateRoot=function(e,t,n){if(!Xs(e))throw Error(o(405));var r=null!=n&&n.hydratedSources||null,a=!1,l="",i=Ks;if(null!=n&&(!0===n.unstable_strictMode&&(a=!0),void 0!==n.identifierPrefix&&(l=n.identifierPrefix),void 0!==n.onRecoverableError&&(i=n.onRecoverableError)),t=Ws(t,null,e,1,null!=n?n:null,a,0,l,i),e[ha]=t.current,$r(e),r)for(e=0;e<r.length;e++)a=(a=(n=r[e])._getVersion)(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,a]:t.mutableSourceEagerHydrationData.push(n,a);return new Gs(t)},t.render=function(e,t,n){if(!Js(t))throw Error(o(200));return ec(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Js(e))throw Error(o(40));return!!e._reactRootContainer&&(fs((function(){ec(null,null,e,!1,(function(){e._reactRootContainer=null,e[ha]=null}))})),!0)},t.unstable_batchedUpdates=cs,t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Js(n))throw Error(o(200));if(null==e||void 0===e._reactInternals)throw Error(o(38));return ec(e,t,n,!1,r)},t.version="18.2.0-next-9e3b772b8-20220608"},745:(e,t,n)=>{var r=n(935);t.s=r.createRoot,r.hydrateRoot},935:(e,t,n)=>{!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(448)},251:(e,t,n)=>{var r=n(294),a=Symbol.for("react.element"),o=Symbol.for("react.fragment"),l=Object.prototype.hasOwnProperty,i=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,u={key:!0,ref:!0,__self:!0,__source:!0};function s(e,t,n){var r,o={},s=null,c=null;for(r in void 0!==n&&(s=""+n),void 0!==t.key&&(s=""+t.key),void 0!==t.ref&&(c=t.ref),t)l.call(t,r)&&!u.hasOwnProperty(r)&&(o[r]=t[r]);if(e&&e.defaultProps)for(r in t=e.defaultProps)void 0===o[r]&&(o[r]=t[r]);return{$$typeof:a,type:e,key:s,ref:c,props:o,_owner:i.current}}t.Fragment=o,t.jsx=s,t.jsxs=s},408:(e,t)=>{var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),a=Symbol.for("react.fragment"),o=Symbol.for("react.strict_mode"),l=Symbol.for("react.profiler"),i=Symbol.for("react.provider"),u=Symbol.for("react.context"),s=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),f=Symbol.for("react.memo"),d=Symbol.for("react.lazy"),p=Symbol.iterator,h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m=Object.assign,v={};function g(e,t,n){this.props=e,this.context=t,this.refs=v,this.updater=n||h}function y(){}function b(e,t,n){this.props=e,this.context=t,this.refs=v,this.updater=n||h}g.prototype.isReactComponent={},g.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},g.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},y.prototype=g.prototype;var w=b.prototype=new y;w.constructor=b,m(w,g.prototype),w.isPureReactComponent=!0;var k=Array.isArray,S=Object.prototype.hasOwnProperty,x={current:null},C={key:!0,ref:!0,__self:!0,__source:!0};function E(e,t,r){var a,o={},l=null,i=null;if(null!=t)for(a in void 0!==t.ref&&(i=t.ref),void 0!==t.key&&(l=""+t.key),t)S.call(t,a)&&!C.hasOwnProperty(a)&&(o[a]=t[a]);var u=arguments.length-2;if(1===u)o.children=r;else if(1<u){for(var s=Array(u),c=0;c<u;c++)s[c]=arguments[c+2];o.children=s}if(e&&e.defaultProps)for(a in u=e.defaultProps)void 0===o[a]&&(o[a]=u[a]);return{$$typeof:n,type:e,key:l,ref:i,props:o,_owner:x.current}}function A(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var _=/\/+/g;function P(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function L(e,t,a,o,l){var i=typeof e;"undefined"!==i&&"boolean"!==i||(e=null);var u=!1;if(null===e)u=!0;else switch(i){case"string":case"number":u=!0;break;case"object":switch(e.$$typeof){case n:case r:u=!0}}if(u)return l=l(u=e),e=""===o?"."+P(u,0):o,k(l)?(a="",null!=e&&(a=e.replace(_,"$&/")+"/"),L(l,t,a,"",(function(e){return e}))):null!=l&&(A(l)&&(l=function(e,t){return{$$typeof:n,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(l,a+(!l.key||u&&u.key===l.key?"":(""+l.key).replace(_,"$&/")+"/")+e)),t.push(l)),1;if(u=0,o=""===o?".":o+":",k(e))for(var s=0;s<e.length;s++){var c=o+P(i=e[s],s);u+=L(i,t,a,c,l)}else if(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=p&&e[p]||e["@@iterator"])?e:null}(e),"function"==typeof c)for(e=c.call(e),s=0;!(i=e.next()).done;)u+=L(i=i.value,t,a,c=o+P(i,s++),l);else if("object"===i)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return u}function T(e,t,n){if(null==e)return e;var r=[],a=0;return L(e,r,"","",(function(e){return t.call(n,e,a++)})),r}function R(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var D={current:null},z={transition:null},N={ReactCurrentDispatcher:D,ReactCurrentBatchConfig:z,ReactCurrentOwner:x};t.Children={map:T,forEach:function(e,t,n){T(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return T(e,(function(){t++})),t},toArray:function(e){return T(e,(function(e){return e}))||[]},only:function(e){if(!A(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=g,t.Fragment=a,t.Profiler=l,t.PureComponent=b,t.StrictMode=o,t.Suspense=c,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=N,t.cloneElement=function(e,t,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var a=m({},e.props),o=e.key,l=e.ref,i=e._owner;if(null!=t){if(void 0!==t.ref&&(l=t.ref,i=x.current),void 0!==t.key&&(o=""+t.key),e.type&&e.type.defaultProps)var u=e.type.defaultProps;for(s in t)S.call(t,s)&&!C.hasOwnProperty(s)&&(a[s]=void 0===t[s]&&void 0!==u?u[s]:t[s])}var s=arguments.length-2;if(1===s)a.children=r;else if(1<s){u=Array(s);for(var c=0;c<s;c++)u[c]=arguments[c+2];a.children=u}return{$$typeof:n,type:e.type,key:o,ref:l,props:a,_owner:i}},t.createContext=function(e){return(e={$$typeof:u,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:i,_context:e},e.Consumer=e},t.createElement=E,t.createFactory=function(e){var t=E.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:s,render:e}},t.isValidElement=A,t.lazy=function(e){return{$$typeof:d,_payload:{_status:-1,_result:e},_init:R}},t.memo=function(e,t){return{$$typeof:f,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=z.transition;z.transition={};try{e()}finally{z.transition=t}},t.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},t.useCallback=function(e,t){return D.current.useCallback(e,t)},t.useContext=function(e){return D.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return D.current.useDeferredValue(e)},t.useEffect=function(e,t){return D.current.useEffect(e,t)},t.useId=function(){return D.current.useId()},t.useImperativeHandle=function(e,t,n){return D.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return D.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return D.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return D.current.useMemo(e,t)},t.useReducer=function(e,t,n){return D.current.useReducer(e,t,n)},t.useRef=function(e){return D.current.useRef(e)},t.useState=function(e){return D.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return D.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return D.current.useTransition()},t.version="18.2.0"},294:(e,t,n)=>{e.exports=n(408)},893:(e,t,n)=>{e.exports=n(251)},53:(e,t)=>{function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,a=e[r];if(!(0<o(a,t)))break e;e[r]=t,e[n]=a,n=r}}function r(e){return 0===e.length?null:e[0]}function a(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,a=e.length,l=a>>>1;r<l;){var i=2*(r+1)-1,u=e[i],s=i+1,c=e[s];if(0>o(u,n))s<a&&0>o(c,u)?(e[r]=c,e[s]=n,r=s):(e[r]=u,e[i]=n,r=i);else{if(!(s<a&&0>o(c,n)))break e;e[r]=c,e[s]=n,r=s}}}return t}function o(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var l=performance;t.unstable_now=function(){return l.now()}}else{var i=Date,u=i.now();t.unstable_now=function(){return i.now()-u}}var s=[],c=[],f=1,d=null,p=3,h=!1,m=!1,v=!1,g="function"==typeof setTimeout?setTimeout:null,y="function"==typeof clearTimeout?clearTimeout:null,b="undefined"!=typeof setImmediate?setImmediate:null;function w(e){for(var t=r(c);null!==t;){if(null===t.callback)a(c);else{if(!(t.startTime<=e))break;a(c),t.sortIndex=t.expirationTime,n(s,t)}t=r(c)}}function k(e){if(v=!1,w(e),!m)if(null!==r(s))m=!0,z(S);else{var t=r(c);null!==t&&N(k,t.startTime-e)}}function S(e,n){m=!1,v&&(v=!1,y(A),A=-1),h=!0;var o=p;try{for(w(n),d=r(s);null!==d&&(!(d.expirationTime>n)||e&&!L());){var l=d.callback;if("function"==typeof l){d.callback=null,p=d.priorityLevel;var i=l(d.expirationTime<=n);n=t.unstable_now(),"function"==typeof i?d.callback=i:d===r(s)&&a(s),w(n)}else a(s);d=r(s)}if(null!==d)var u=!0;else{var f=r(c);null!==f&&N(k,f.startTime-n),u=!1}return u}finally{d=null,p=o,h=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var x,C=!1,E=null,A=-1,_=5,P=-1;function L(){return!(t.unstable_now()-P<_)}function T(){if(null!==E){var e=t.unstable_now();P=e;var n=!0;try{n=E(!0,e)}finally{n?x():(C=!1,E=null)}}else C=!1}if("function"==typeof b)x=function(){b(T)};else if("undefined"!=typeof MessageChannel){var R=new MessageChannel,D=R.port2;R.port1.onmessage=T,x=function(){D.postMessage(null)}}else x=function(){g(T,0)};function z(e){E=e,C||(C=!0,x())}function N(e,n){A=g((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){m||h||(m=!0,z(S))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):_=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return p},t.unstable_getFirstCallbackNode=function(){return r(s)},t.unstable_next=function(e){switch(p){case 1:case 2:case 3:var t=3;break;default:t=p}var n=p;p=t;try{return e()}finally{p=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=p;p=e;try{return t()}finally{p=n}},t.unstable_scheduleCallback=function(e,a,o){var l=t.unstable_now();switch(o="object"==typeof o&&null!==o&&"number"==typeof(o=o.delay)&&0<o?l+o:l,e){case 1:var i=-1;break;case 2:i=250;break;case 5:i=1073741823;break;case 4:i=1e4;break;default:i=5e3}return e={id:f++,callback:a,priorityLevel:e,startTime:o,expirationTime:i=o+i,sortIndex:-1},o>l?(e.sortIndex=o,n(c,e),null===r(s)&&e===r(c)&&(v?(y(A),A=-1):v=!0,N(k,o-l))):(e.sortIndex=i,n(s,e),m||h||(m=!0,z(S))),e},t.unstable_shouldYield=L,t.unstable_wrapCallback=function(e){var t=p;return function(){var n=p;p=t;try{return e.apply(this,arguments)}finally{p=n}}}},840:(e,t,n)=>{e.exports=n(53)},379:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var o={},l=[],i=0;i<e.length;i++){var u=e[i],s=r.base?u[0]+r.base:u[0],c=o[s]||0,f="".concat(s," ").concat(c);o[s]=c+1;var d=n(f),p={css:u[1],media:u[2],sourceMap:u[3],supports:u[4],layer:u[5]};if(-1!==d)t[d].references++,t[d].updater(p);else{var h=a(p,r);r.byIndex=i,t.splice(i,0,{identifier:f,updater:h,references:1})}l.push(f)}return l}function a(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,a){var o=r(e=e||[],a=a||{});return function(e){e=e||[];for(var l=0;l<o.length;l++){var i=n(o[l]);t[i].references--}for(var u=r(e,a),s=0;s<o.length;s++){var c=n(o[s]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}o=u}}},569:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,a&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},o={};function l(e){var t=o[e];if(void 0!==t)return t.exports;var n=o[e]={id:e,exports:{}};return a[e](n,n.exports,l),n.exports}l.m=a,l.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return l.d(t,{a:t}),t},t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,l.t=function(n,r){if(1&r&&(n=this(n)),8&r)return n;if("object"==typeof n&&n){if(4&r&&n.__esModule)return n;if(16&r&&"function"==typeof n.then)return n}var a=Object.create(null);l.r(a);var o={};e=e||[null,t({}),t([]),t(t)];for(var i=2&r&&n;"object"==typeof i&&!~e.indexOf(i);i=t(i))Object.getOwnPropertyNames(i).forEach((e=>o[e]=()=>n[e]));return o.default=()=>n,l.d(a,o),a},l.d=(e,t)=>{for(var n in t)l.o(t,n)&&!l.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},l.f={},l.e=e=>Promise.all(Object.keys(l.f).reduce(((t,n)=>(l.f[n](e,t),t)),[])),l.u=e=>e+".main.bundle.js",l.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),l.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n={},r="simple_app:",l.l=(e,t,a,o)=>{if(n[e])n[e].push(t);else{var i,u;if(void 0!==a)for(var s=document.getElementsByTagName("script"),c=0;c<s.length;c++){var f=s[c];if(f.getAttribute("src")==e||f.getAttribute("data-webpack")==r+a){i=f;break}}i||(u=!0,(i=document.createElement("script")).charset="utf-8",i.timeout=120,l.nc&&i.setAttribute("nonce",l.nc),i.setAttribute("data-webpack",r+a),i.src=e),n[e]=[t];var d=(t,r)=>{i.onerror=i.onload=null,clearTimeout(p);var a=n[e];if(delete n[e],i.parentNode&&i.parentNode.removeChild(i),a&&a.forEach((e=>e(r))),t)return t(r)},p=setTimeout(d.bind(null,void 0,{type:"timeout",target:i}),12e4);i.onerror=d.bind(null,i.onerror),i.onload=d.bind(null,i.onload),u&&document.head.appendChild(i)}},l.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;l.g.importScripts&&(e=l.g.location+"");var t=l.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");if(n.length)for(var r=n.length-1;r>-1&&!e;)e=n[r--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),l.p=e})(),(()=>{var e={179:0};l.f.j=(t,n)=>{var r=l.o(e,t)?e[t]:void 0;if(0!==r)if(r)n.push(r[2]);else{var a=new Promise(((n,a)=>r=e[t]=[n,a]));n.push(r[2]=a);var o=l.p+l.u(t),i=new Error;l.l(o,(n=>{if(l.o(e,t)&&(0!==(r=e[t])&&(e[t]=void 0),r)){var a=n&&("load"===n.type?"missing":n.type),o=n&&n.target&&n.target.src;i.message="Loading chunk "+t+" failed.\n("+a+": "+o+")",i.name="ChunkLoadError",i.type=a,i.request=o,r[1](i)}}),"chunk-"+t,t)}};var t=(t,n)=>{var r,a,[o,i,u]=n,s=0;if(o.some((t=>0!==e[t]))){for(r in i)l.o(i,r)&&(l.m[r]=i[r]);u&&u(l)}for(t&&t(n);s<o.length;s++)a=o[s],l.o(e,a)&&e[a]&&e[a][0](),e[a]=0},n=self.webpackChunksimple_app=self.webpackChunksimple_app||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})(),l.nc=void 0,(()=>{var e,t=l(893),n=l(294),r=l.t(n,2),a=l(745);function o(){return o=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o.apply(this,arguments)}!function(e){e.Pop="POP",e.Push="PUSH",e.Replace="REPLACE"}(e||(e={}));const i="popstate";function u(e,t){if(!1===e||null==e)throw new Error(t)}function s(e,t){if(!e){"undefined"!=typeof console&&console.warn(t);try{throw new Error(t)}catch(e){}}}function c(e,t){return{usr:e.state,key:e.key,idx:t}}function f(e,t,n,r){return void 0===n&&(n=null),o({pathname:"string"==typeof e?e:e.pathname,search:"",hash:""},"string"==typeof t?p(t):t,{state:n,key:t&&t.key||r||Math.random().toString(36).substr(2,8)})}function d(e){let{pathname:t="/",search:n="",hash:r=""}=e;return n&&"?"!==n&&(t+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(t+="#"===r.charAt(0)?r:"#"+r),t}function p(e){let t={};if(e){let n=e.indexOf("#");n>=0&&(t.hash=e.substr(n),e=e.substr(0,n));let r=e.indexOf("?");r>=0&&(t.search=e.substr(r),e=e.substr(0,r)),e&&(t.pathname=e)}return t}var h;!function(e){e.data="data",e.deferred="deferred",e.redirect="redirect",e.error="error"}(h||(h={}));const m=new Set(["lazy","caseSensitive","path","id","index","children"]);function v(e,t,n,r){return void 0===n&&(n=[]),void 0===r&&(r={}),e.map(((e,a)=>{let l=[...n,a],i="string"==typeof e.id?e.id:l.join("-");if(u(!0!==e.index||!e.children,"Cannot specify children on an index route"),u(!r[i],'Found a route id collision on id "'+i+"\".  Route id's must be globally unique within Data Router usages"),function(e){return!0===e.index}(e)){let n=o({},e,t(e),{id:i});return r[i]=n,n}{let n=o({},e,t(e),{id:i,children:void 0});return r[i]=n,e.children&&(n.children=v(e.children,t,l,r)),n}}))}function g(e,t,n){void 0===n&&(n="/");let r=R(("string"==typeof t?p(t):t).pathname||"/",n);if(null==r)return null;let a=y(e);!function(e){e.sort(((e,t)=>e.score!==t.score?t.score-e.score:function(e,t){return e.length===t.length&&e.slice(0,-1).every(((e,n)=>e===t[n]))?e[e.length-1]-t[t.length-1]:0}(e.routesMeta.map((e=>e.childrenIndex)),t.routesMeta.map((e=>e.childrenIndex)))))}(a);let o=null;for(let e=0;null==o&&e<a.length;++e)o=P(a[e],T(r));return o}function y(e,t,n,r){void 0===t&&(t=[]),void 0===n&&(n=[]),void 0===r&&(r="");let a=(e,a,o)=>{let l={relativePath:void 0===o?e.path||"":o,caseSensitive:!0===e.caseSensitive,childrenIndex:a,route:e};l.relativePath.startsWith("/")&&(u(l.relativePath.startsWith(r),'Absolute route path "'+l.relativePath+'" nested under path "'+r+'" is not valid. An absolute child route path must start with the combined path of all its parent routes.'),l.relativePath=l.relativePath.slice(r.length));let i=M([r,l.relativePath]),s=n.concat(l);e.children&&e.children.length>0&&(u(!0!==e.index,'Index routes must not have child routes. Please remove all child routes from route path "'+i+'".'),y(e.children,t,s,i)),(null!=e.path||e.index)&&t.push({path:i,score:_(i,e.index),routesMeta:s})};return e.forEach(((e,t)=>{var n;if(""!==e.path&&null!=(n=e.path)&&n.includes("?"))for(let n of b(e.path))a(e,t,n);else a(e,t)})),t}function b(e){let t=e.split("/");if(0===t.length)return[];let[n,...r]=t,a=n.endsWith("?"),o=n.replace(/\?$/,"");if(0===r.length)return a?[o,""]:[o];let l=b(r.join("/")),i=[];return i.push(...l.map((e=>""===e?o:[o,e].join("/")))),a&&i.push(...l),i.map((t=>e.startsWith("/")&&""===t?"/":t))}const w=/^:\w+$/,k=3,S=2,x=1,C=10,E=-2,A=e=>"*"===e;function _(e,t){let n=e.split("/"),r=n.length;return n.some(A)&&(r+=E),t&&(r+=S),n.filter((e=>!A(e))).reduce(((e,t)=>e+(w.test(t)?k:""===t?x:C)),r)}function P(e,t){let{routesMeta:n}=e,r={},a="/",o=[];for(let e=0;e<n.length;++e){let l=n[e],i=e===n.length-1,u="/"===a?t:t.slice(a.length)||"/",s=L({path:l.relativePath,caseSensitive:l.caseSensitive,end:i},u);if(!s)return null;Object.assign(r,s.params);let c=l.route;o.push({params:r,pathname:M([a,s.pathname]),pathnameBase:O(M([a,s.pathnameBase])),route:c}),"/"!==s.pathnameBase&&(a=M([a,s.pathnameBase]))}return o}function L(e,t){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});let[n,r]=function(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=!0),s("*"===e||!e.endsWith("*")||e.endsWith("/*"),'Route path "'+e+'" will be treated as if it were "'+e.replace(/\*$/,"/*")+'" because the `*` character must always follow a `/` in the pattern. To get rid of this warning, please change the route path to "'+e.replace(/\*$/,"/*")+'".');let r=[],a="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^${}|()[\]]/g,"\\$&").replace(/\/:(\w+)(\?)?/g,((e,t,n)=>(r.push({paramName:t,isOptional:null!=n}),n?"/?([^\\/]+)?":"/([^\\/]+)")));return e.endsWith("*")?(r.push({paramName:"*"}),a+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):n?a+="\\/*$":""!==e&&"/"!==e&&(a+="(?:(?=\\/|$))"),[new RegExp(a,t?void 0:"i"),r]}(e.path,e.caseSensitive,e.end),a=t.match(n);if(!a)return null;let o=a[0],l=o.replace(/(.)\/+$/,"$1"),i=a.slice(1);return{params:r.reduce(((e,t,n)=>{let{paramName:r,isOptional:a}=t;if("*"===r){let e=i[n]||"";l=o.slice(0,o.length-e.length).replace(/(.)\/+$/,"$1")}const u=i[n];return e[r]=a&&!u?void 0:function(e,t){try{return decodeURIComponent(e)}catch(n){return s(!1,'The value for the URL param "'+t+'" will not be decoded because the string "'+e+'" is a malformed URL segment. This is probably due to a bad percent encoding ('+n+")."),e}}(u||"",r),e}),{}),pathname:o,pathnameBase:l,pattern:e}}function T(e){try{return decodeURI(e)}catch(t){return s(!1,'The URL path "'+e+'" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent encoding ('+t+")."),e}}function R(e,t){if("/"===t)return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let n=t.endsWith("/")?t.length-1:t.length,r=e.charAt(n);return r&&"/"!==r?null:e.slice(n)||"/"}function D(e,t,n,r){return"Cannot include a '"+e+"' character in a manually specified `to."+t+"` field ["+JSON.stringify(r)+"].  Please separate it out to the `to."+n+'` field. Alternatively you may provide the full path as a string in <Link to="..."> and the router will parse it for you.'}function z(e){return e.filter(((e,t)=>0===t||e.route.path&&e.route.path.length>0))}function N(e,t,n,r){let a;void 0===r&&(r=!1),"string"==typeof e?a=p(e):(a=o({},e),u(!a.pathname||!a.pathname.includes("?"),D("?","pathname","search",a)),u(!a.pathname||!a.pathname.includes("#"),D("#","pathname","hash",a)),u(!a.search||!a.search.includes("#"),D("#","search","hash",a)));let l,i=""===e||""===a.pathname,s=i?"/":a.pathname;if(r||null==s)l=n;else{let e=t.length-1;if(s.startsWith("..")){let t=s.split("/");for(;".."===t[0];)t.shift(),e-=1;a.pathname=t.join("/")}l=e>=0?t[e]:"/"}let c=function(e,t){void 0===t&&(t="/");let{pathname:n,search:r="",hash:a=""}="string"==typeof e?p(e):e,o=n?n.startsWith("/")?n:function(e,t){let n=t.replace(/\/+$/,"").split("/");return e.split("/").forEach((e=>{".."===e?n.length>1&&n.pop():"."!==e&&n.push(e)})),n.length>1?n.join("/"):"/"}(n,t):t;return{pathname:o,search:j(r),hash:U(a)}}(a,l),f=s&&"/"!==s&&s.endsWith("/"),d=(i||"."===s)&&n.endsWith("/");return c.pathname.endsWith("/")||!f&&!d||(c.pathname+="/"),c}const M=e=>e.join("/").replace(/\/\/+/g,"/"),O=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),j=e=>e&&"?"!==e?e.startsWith("?")?e:"?"+e:"",U=e=>e&&"#"!==e?e.startsWith("#")?e:"#"+e:"";Error;class F{constructor(e,t,n,r){void 0===r&&(r=!1),this.status=e,this.statusText=t||"",this.internal=r,n instanceof Error?(this.data=n.toString(),this.error=n):this.data=n}}function I(e){return null!=e&&"number"==typeof e.status&&"string"==typeof e.statusText&&"boolean"==typeof e.internal&&"data"in e}const B=["post","put","patch","delete"],$=new Set(B),W=["get",...B],V=new Set(W),H=new Set([301,302,303,307,308]),Q=new Set([307,308]),q={state:"idle",location:void 0,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0},K={state:"idle",data:void 0,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0},Y={state:"unblocked",proceed:void 0,reset:void 0,location:void 0},G=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,X=e=>({hasErrorBoundary:Boolean(e.hasErrorBoundary)}),J="remix-router-transitions";function Z(e,t,n,r,a,o,l){let i,u;if(null!=o&&"path"!==l){i=[];for(let e of t)if(i.push(e),e.route.id===o){u=e;break}}else i=t,u=t[t.length-1];let s=N(a||".",z(i).map((e=>e.pathnameBase)),R(e.pathname,n)||e.pathname,"path"===l);return null==a&&(s.search=e.search,s.hash=e.hash),null!=a&&""!==a&&"."!==a||!u||!u.route.index||Se(s.search)||(s.search=s.search?s.search.replace(/^\?/,"?index&"):"?index"),r&&"/"!==n&&(s.pathname="/"===s.pathname?n:M([n,s.pathname])),d(s)}function ee(e,t,n,r){if(!r||!function(e){return null!=e&&("formData"in e&&null!=e.formData||"body"in e&&void 0!==e.body)}(r))return{path:n};if(r.formMethod&&(a=r.formMethod,!V.has(a.toLowerCase())))return{path:n,error:pe(405,{method:r.formMethod})};var a;let o,l,i=()=>({path:n,error:pe(400,{type:"invalid-body"})}),s=r.formMethod||"get",c=e?s.toUpperCase():s.toLowerCase(),f=me(n);if(void 0!==r.body){if("text/plain"===r.formEncType){if(!be(c))return i();let e="string"==typeof r.body?r.body:r.body instanceof FormData||r.body instanceof URLSearchParams?Array.from(r.body.entries()).reduce(((e,t)=>{let[n,r]=t;return""+e+n+"="+r+"\n"}),""):String(r.body);return{path:n,submission:{formMethod:c,formAction:f,formEncType:r.formEncType,formData:void 0,json:void 0,text:e}}}if("application/json"===r.formEncType){if(!be(c))return i();try{let e="string"==typeof r.body?JSON.parse(r.body):r.body;return{path:n,submission:{formMethod:c,formAction:f,formEncType:r.formEncType,formData:void 0,json:e,text:void 0}}}catch(e){return i()}}}if(u("function"==typeof FormData,"FormData is not available in this environment"),r.formData)o=ie(r.formData),l=r.formData;else if(r.body instanceof FormData)o=ie(r.body),l=r.body;else if(r.body instanceof URLSearchParams)o=r.body,l=ue(o);else if(null==r.body)o=new URLSearchParams,l=new FormData;else try{o=new URLSearchParams(r.body),l=ue(o)}catch(e){return i()}let h={formMethod:c,formAction:f,formEncType:r&&r.formEncType||"application/x-www-form-urlencoded",formData:l,json:void 0,text:void 0};if(be(h.formMethod))return{path:n,submission:h};let m=p(n);return t&&m.search&&Se(m.search)&&o.append("index",""),m.search="?"+o,{path:d(m),submission:h}}function te(e,t,n,r,a,l,i,u,s,c,f,d,p,h){let m=h?Object.values(h)[0]:p?Object.values(p)[0]:void 0,v=e.createURL(t.location),y=e.createURL(a),b=h?Object.keys(h)[0]:void 0,w=function(e,t){let n=e;if(t){let r=e.findIndex((e=>e.route.id===t));r>=0&&(n=e.slice(0,r))}return n}(n,b).filter(((e,n)=>{if(e.route.lazy)return!0;if(null==e.route.loader)return!1;if(function(e,t,n){let r=!t||n.route.id!==t.route.id,a=void 0===e[n.route.id];return r||a}(t.loaderData,t.matches[n],e)||i.some((t=>t===e.route.id)))return!0;let a=t.matches[n],u=e;return re(e,o({currentUrl:v,currentParams:a.params,nextUrl:y,nextParams:u.params},r,{actionResult:m,defaultShouldRevalidate:l||v.pathname+v.search===y.pathname+y.search||v.search!==y.search||ne(a,u)}))})),k=[];return s.forEach(((e,a)=>{if(!n.some((t=>t.route.id===e.routeId)))return;let i=g(f,e.path,d);if(!i)return void k.push({key:a,routeId:e.routeId,path:e.path,matches:null,match:null,controller:null});let s=t.fetchers.get(a),p=xe(i,e.path),h=!1;h=!c.has(a)&&(!!u.includes(a)||(s&&"idle"!==s.state&&void 0===s.data?l:re(p,o({currentUrl:v,currentParams:t.matches[t.matches.length-1].params,nextUrl:y,nextParams:n[n.length-1].params},r,{actionResult:m,defaultShouldRevalidate:l})))),h&&k.push({key:a,routeId:e.routeId,path:e.path,matches:i,match:p,controller:new AbortController})})),[w,k]}function ne(e,t){let n=e.route.path;return e.pathname!==t.pathname||null!=n&&n.endsWith("*")&&e.params["*"]!==t.params["*"]}function re(e,t){if(e.route.shouldRevalidate){let n=e.route.shouldRevalidate(t);if("boolean"==typeof n)return n}return t.defaultShouldRevalidate}async function ae(e,t,n){if(!e.lazy)return;let r=await e.lazy();if(!e.lazy)return;let a=n[e.id];u(a,"No route found in manifest");let l={};for(let e in r){let t=void 0!==a[e]&&"hasErrorBoundary"!==e;s(!t,'Route "'+a.id+'" has a static property "'+e+'" defined but its lazy function is also returning a value for this property. The lazy route property "'+e+'" will be ignored.'),t||m.has(e)||(l[e]=r[e])}Object.assign(a,l),Object.assign(a,o({},t(a),{lazy:void 0}))}async function oe(e,t,n,r,a,o,l,i){let s,c,f;void 0===i&&(i={});let d=e=>{let r,a=new Promise(((e,t)=>r=t));return f=()=>r(),t.signal.addEventListener("abort",f),Promise.race([e({request:t,params:n.params,context:i.requestContext}),a])};try{let r=n.route[e];if(n.route.lazy)if(r){let e,t=await Promise.all([d(r).catch((t=>{e=t})),ae(n.route,o,a)]);if(e)throw e;c=t[0]}else{if(await ae(n.route,o,a),r=n.route[e],!r){if("action"===e){let e=new URL(t.url),r=e.pathname+e.search;throw pe(405,{method:t.method,pathname:r,routeId:n.route.id})}return{type:h.data,data:void 0}}c=await d(r)}else{if(!r){let e=new URL(t.url);throw pe(404,{pathname:e.pathname+e.search})}c=await d(r)}u(void 0!==c,"You defined "+("action"===e?"an action":"a loader")+' for route "'+n.route.id+"\" but didn't return anything from your `"+e+"` function. Please return a value or `null`.")}catch(e){s=h.error,c=e}finally{f&&t.signal.removeEventListener("abort",f)}if(null!=(p=c)&&"number"==typeof p.status&&"string"==typeof p.statusText&&"object"==typeof p.headers&&void 0!==p.body){let e,a=c.status;if(H.has(a)){let e=c.headers.get("Location");if(u(e,"Redirects returned/thrown from loaders/actions must have a Location header"),G.test(e)){if(!i.isStaticRequest){let n=new URL(t.url),r=e.startsWith("//")?new URL(n.protocol+e):new URL(e),a=null!=R(r.pathname,l);r.origin===n.origin&&a&&(e=r.pathname+r.search+r.hash)}}else e=Z(new URL(t.url),r.slice(0,r.indexOf(n)+1),l,!0,e);if(i.isStaticRequest)throw c.headers.set("Location",e),c;return{type:h.redirect,status:a,location:e,revalidate:null!==c.headers.get("X-Remix-Revalidate"),reloadDocument:null!==c.headers.get("X-Remix-Reload-Document")}}if(i.isRouteRequest)throw{type:s===h.error?h.error:h.data,response:c};let o=c.headers.get("Content-Type");return e=o&&/\bapplication\/json\b/.test(o)?await c.json():await c.text(),s===h.error?{type:s,error:new F(a,c.statusText,e),headers:c.headers}:{type:h.data,data:e,statusCode:c.status,headers:c.headers}}var p,m,v;return s===h.error?{type:s,error:c}:function(e){let t=e;return t&&"object"==typeof t&&"object"==typeof t.data&&"function"==typeof t.subscribe&&"function"==typeof t.cancel&&"function"==typeof t.resolveData}(c)?{type:h.deferred,deferredData:c,statusCode:null==(m=c.init)?void 0:m.status,headers:(null==(v=c.init)?void 0:v.headers)&&new Headers(c.init.headers)}:{type:h.data,data:c}}function le(e,t,n,r){let a=e.createURL(me(t)).toString(),o={signal:n};if(r&&be(r.formMethod)){let{formMethod:e,formEncType:t}=r;o.method=e.toUpperCase(),"application/json"===t?(o.headers=new Headers({"Content-Type":t}),o.body=JSON.stringify(r.json)):"text/plain"===t?o.body=r.text:"application/x-www-form-urlencoded"===t&&r.formData?o.body=ie(r.formData):o.body=r.formData}return new Request(a,o)}function ie(e){let t=new URLSearchParams;for(let[n,r]of e.entries())t.append(n,"string"==typeof r?r:r.name);return t}function ue(e){let t=new FormData;for(let[n,r]of e.entries())t.append(n,r);return t}function se(e,t,n,r,a,l,i,s){let{loaderData:c,errors:f}=function(e,t,n,r,a){let o,l={},i=null,s=!1,c={};return n.forEach(((n,f)=>{let d=t[f].route.id;if(u(!ye(n),"Cannot handle redirect results in processLoaderData"),ge(n)){let t=fe(e,d),a=n.error;r&&(a=Object.values(r)[0],r=void 0),i=i||{},null==i[t.route.id]&&(i[t.route.id]=a),l[d]=void 0,s||(s=!0,o=I(n.error)?n.error.status:500),n.headers&&(c[d]=n.headers)}else ve(n)?(a.set(d,n.deferredData),l[d]=n.deferredData.data):l[d]=n.data,null==n.statusCode||200===n.statusCode||s||(o=n.statusCode),n.headers&&(c[d]=n.headers)})),r&&(i=r,l[Object.keys(r)[0]]=void 0),{loaderData:l,errors:i,statusCode:o||200,loaderHeaders:c}}(t,n,r,a,s);for(let t=0;t<l.length;t++){let{key:n,match:r,controller:a}=l[t];u(void 0!==i&&void 0!==i[t],"Did not find corresponding fetcher result");let s=i[t];if(!a||!a.signal.aborted)if(ge(s)){let t=fe(e.matches,null==r?void 0:r.route.id);f&&f[t.route.id]||(f=o({},f,{[t.route.id]:s.error})),e.fetchers.delete(n)}else if(ye(s))u(!1,"Unhandled fetcher revalidation redirect");else if(ve(s))u(!1,"Unhandled fetcher deferred data");else{let t=_e(s.data);e.fetchers.set(n,t)}}return{loaderData:c,errors:f}}function ce(e,t,n,r){let a=o({},t);for(let o of n){let n=o.route.id;if(t.hasOwnProperty(n)?void 0!==t[n]&&(a[n]=t[n]):void 0!==e[n]&&o.route.loader&&(a[n]=e[n]),r&&r.hasOwnProperty(n))break}return a}function fe(e,t){return(t?e.slice(0,e.findIndex((e=>e.route.id===t))+1):[...e]).reverse().find((e=>!0===e.route.hasErrorBoundary))||e[0]}function de(e){let t=1===e.length?e[0]:e.find((e=>e.index||!e.path||"/"===e.path))||{id:"__shim-error-route__"};return{matches:[{params:{},pathname:"",pathnameBase:"",route:t}],route:t}}function pe(e,t){let{pathname:n,routeId:r,method:a,type:o}=void 0===t?{}:t,l="Unknown Server Error",i="Unknown @remix-run/router error";return 400===e?(l="Bad Request",a&&n&&r?i="You made a "+a+' request to "'+n+'" but did not provide a `loader` for route "'+r+'", so there is no way to handle the request.':"defer-action"===o?i="defer() is not supported in actions":"invalid-body"===o&&(i="Unable to encode submission body")):403===e?(l="Forbidden",i='Route "'+r+'" does not match URL "'+n+'"'):404===e?(l="Not Found",i='No route matches URL "'+n+'"'):405===e&&(l="Method Not Allowed",a&&n&&r?i="You made a "+a.toUpperCase()+' request to "'+n+'" but did not provide an `action` for route "'+r+'", so there is no way to handle the request.':a&&(i='Invalid request method "'+a.toUpperCase()+'"')),new F(e||500,l,new Error(i),!0)}function he(e){for(let t=e.length-1;t>=0;t--){let n=e[t];if(ye(n))return{result:n,idx:t}}}function me(e){return d(o({},"string"==typeof e?p(e):e,{hash:""}))}function ve(e){return e.type===h.deferred}function ge(e){return e.type===h.error}function ye(e){return(e&&e.type)===h.redirect}function be(e){return $.has(e.toLowerCase())}async function we(e,t,n,r,a,o){for(let l=0;l<n.length;l++){let i=n[l],s=t[l];if(!s)continue;let c=e.find((e=>e.route.id===s.route.id)),f=null!=c&&!ne(c,s)&&void 0!==(o&&o[s.route.id]);if(ve(i)&&(a||f)){let e=r[l];u(e,"Expected an AbortSignal for revalidating fetcher deferred result"),await ke(i,e,a).then((e=>{e&&(n[l]=e||n[l])}))}}}async function ke(e,t,n){if(void 0===n&&(n=!1),!await e.deferredData.resolveData(t)){if(n)try{return{type:h.data,data:e.deferredData.unwrappedData}}catch(e){return{type:h.error,error:e}}return{type:h.data,data:e.deferredData.data}}}function Se(e){return new URLSearchParams(e).getAll("index").some((e=>""===e))}function xe(e,t){let n="string"==typeof t?p(t).search:t.search;if(e[e.length-1].route.index&&Se(n||""))return e[e.length-1];let r=z(e);return r[r.length-1]}function Ce(e){let{formMethod:t,formAction:n,formEncType:r,text:a,formData:o,json:l}=e;if(t&&n&&r)return null!=a?{formMethod:t,formAction:n,formEncType:r,formData:void 0,json:void 0,text:a}:null!=o?{formMethod:t,formAction:n,formEncType:r,formData:o,json:void 0,text:void 0}:void 0!==l?{formMethod:t,formAction:n,formEncType:r,formData:void 0,json:l,text:void 0}:void 0}function Ee(e,t){return t?{state:"loading",location:e,formMethod:t.formMethod,formAction:t.formAction,formEncType:t.formEncType,formData:t.formData,json:t.json,text:t.text}:{state:"loading",location:e,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0}}function Ae(e,t){return e?{state:"loading",formMethod:e.formMethod,formAction:e.formAction,formEncType:e.formEncType,formData:e.formData,json:e.json,text:e.text,data:t}:{state:"loading",formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0,data:t}}function _e(e){return{state:"idle",formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0,data:e}}function Pe(){return Pe=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Pe.apply(this,arguments)}Symbol("deferred");const Le=n.createContext(null),Te=n.createContext(null),Re=n.createContext(null),De=n.createContext(null),ze=n.createContext({outlet:null,matches:[],isDataRoute:!1}),Ne=n.createContext(null);function Me(){return null!=n.useContext(De)}function Oe(){return Me()||u(!1),n.useContext(De).location}function je(e){n.useContext(Re).static||n.useLayoutEffect(e)}function Ue(){let{isDataRoute:e}=n.useContext(ze);return e?function(){let{router:e}=function(e){let t=n.useContext(Le);return t||u(!1),t}(Qe.UseNavigateStable),t=Ye(qe.UseNavigateStable),r=n.useRef(!1);je((()=>{r.current=!0}));let a=n.useCallback((function(n,a){void 0===a&&(a={}),r.current&&("number"==typeof n?e.navigate(n):e.navigate(n,Pe({fromRouteId:t},a)))}),[e,t]);return a}():function(){Me()||u(!1);let e=n.useContext(Le),{basename:t,navigator:r}=n.useContext(Re),{matches:a}=n.useContext(ze),{pathname:o}=Oe(),l=JSON.stringify(z(a).map((e=>e.pathnameBase))),i=n.useRef(!1);je((()=>{i.current=!0}));let s=n.useCallback((function(n,a){if(void 0===a&&(a={}),!i.current)return;if("number"==typeof n)return void r.go(n);let u=N(n,JSON.parse(l),o,"path"===a.relative);null==e&&"/"!==t&&(u.pathname="/"===u.pathname?t:M([t,u.pathname])),(a.replace?r.replace:r.push)(u,a.state,a)}),[t,r,l,o,e]);return s}()}const Fe=n.createContext(null);function Ie(e,t){let{relative:r}=void 0===t?{}:t,{matches:a}=n.useContext(ze),{pathname:o}=Oe(),l=JSON.stringify(z(a).map((e=>e.pathnameBase)));return n.useMemo((()=>N(e,JSON.parse(l),o,"path"===r)),[e,l,o,r])}function Be(t,r,a){Me()||u(!1);let{navigator:o}=n.useContext(Re),{matches:l}=n.useContext(ze),i=l[l.length-1],s=i?i.params:{},c=(i&&i.pathname,i?i.pathnameBase:"/");i&&i.route;let f,d=Oe();if(r){var h;let e="string"==typeof r?p(r):r;"/"===c||(null==(h=e.pathname)?void 0:h.startsWith(c))||u(!1),f=e}else f=d;let m=f.pathname||"/",v=g(t,{pathname:"/"===c?m:m.slice(c.length)||"/"}),y=function(e,t,r){var a;if(void 0===t&&(t=[]),void 0===r&&(r=null),null==e){var o;if(null==(o=r)||!o.errors)return null;e=r.matches}let l=e,i=null==(a=r)?void 0:a.errors;if(null!=i){let e=l.findIndex((e=>e.route.id&&(null==i?void 0:i[e.route.id])));e>=0||u(!1),l=l.slice(0,Math.min(l.length,e+1))}return l.reduceRight(((e,a,o)=>{let u=a.route.id?null==i?void 0:i[a.route.id]:null,s=null;r&&(s=a.route.errorElement||We);let c=t.concat(l.slice(0,o+1)),f=()=>{let t;return t=u?s:a.route.Component?n.createElement(a.route.Component,null):a.route.element?a.route.element:e,n.createElement(He,{match:a,routeContext:{outlet:e,matches:c,isDataRoute:null!=r},children:t})};return r&&(a.route.ErrorBoundary||a.route.errorElement||0===o)?n.createElement(Ve,{location:r.location,revalidation:r.revalidation,component:s,error:u,children:f(),routeContext:{outlet:null,matches:c,isDataRoute:!0}}):f()}),null)}(v&&v.map((e=>Object.assign({},e,{params:Object.assign({},s,e.params),pathname:M([c,o.encodeLocation?o.encodeLocation(e.pathname).pathname:e.pathname]),pathnameBase:"/"===e.pathnameBase?c:M([c,o.encodeLocation?o.encodeLocation(e.pathnameBase).pathname:e.pathnameBase])}))),l,a);return r&&y?n.createElement(De.Provider,{value:{location:Pe({pathname:"/",search:"",hash:"",state:null,key:"default"},f),navigationType:e.Pop}},y):y}function $e(){let e=function(){var e;let t=n.useContext(Ne),r=Ke(qe.UseRouteError),a=Ye(qe.UseRouteError);return t||(null==(e=r.errors)?void 0:e[a])}(),t=I(e)?e.status+" "+e.statusText:e instanceof Error?e.message:JSON.stringify(e),r=e instanceof Error?e.stack:null,a={padding:"0.5rem",backgroundColor:"rgba(200,200,200, 0.5)"};return n.createElement(n.Fragment,null,n.createElement("h2",null,"Unexpected Application Error!"),n.createElement("h3",{style:{fontStyle:"italic"}},t),r?n.createElement("pre",{style:a},r):null,null)}const We=n.createElement($e,null);class Ve extends n.Component{constructor(e){super(e),this.state={location:e.location,revalidation:e.revalidation,error:e.error}}static getDerivedStateFromError(e){return{error:e}}static getDerivedStateFromProps(e,t){return t.location!==e.location||"idle"!==t.revalidation&&"idle"===e.revalidation?{error:e.error,location:e.location,revalidation:e.revalidation}:{error:e.error||t.error,location:t.location,revalidation:e.revalidation||t.revalidation}}componentDidCatch(e,t){console.error("React Router caught the following error during render",e,t)}render(){return this.state.error?n.createElement(ze.Provider,{value:this.props.routeContext},n.createElement(Ne.Provider,{value:this.state.error,children:this.props.component})):this.props.children}}function He(e){let{routeContext:t,match:r,children:a}=e,o=n.useContext(Le);return o&&o.static&&o.staticContext&&(r.route.errorElement||r.route.ErrorBoundary)&&(o.staticContext._deepestRenderedBoundaryId=r.route.id),n.createElement(ze.Provider,{value:t},a)}var Qe=function(e){return e.UseBlocker="useBlocker",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e}(Qe||{}),qe=function(e){return e.UseBlocker="useBlocker",e.UseLoaderData="useLoaderData",e.UseActionData="useActionData",e.UseRouteError="useRouteError",e.UseNavigation="useNavigation",e.UseRouteLoaderData="useRouteLoaderData",e.UseMatches="useMatches",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e.UseRouteId="useRouteId",e}(qe||{});function Ke(e){let t=n.useContext(Te);return t||u(!1),t}function Ye(e){let t=function(e){let t=n.useContext(ze);return t||u(!1),t}(),r=t.matches[t.matches.length-1];return r.route.id||u(!1),r.route.id}function Ge(e){return function(e){let t=n.useContext(ze).outlet;return t?n.createElement(Fe.Provider,{value:e},t):t}(e.context)}function Xe(t){let{basename:r="/",children:a=null,location:o,navigationType:l=e.Pop,navigator:i,static:s=!1}=t;Me()&&u(!1);let c=r.replace(/^\/*/,"/"),f=n.useMemo((()=>({basename:c,navigator:i,static:s})),[c,i,s]);"string"==typeof o&&(o=p(o));let{pathname:d="/",search:h="",hash:m="",state:v=null,key:g="default"}=o,y=n.useMemo((()=>{let e=R(d,c);return null==e?null:{location:{pathname:e,search:h,hash:m,state:v,key:g},navigationType:l}}),[c,d,h,m,v,g,l]);return null==y?null:n.createElement(Re.Provider,{value:f},n.createElement(De.Provider,{children:a,value:y}))}function Je(){return Je=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Je.apply(this,arguments)}function Ze(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}r.startTransition,new Promise((()=>{})),n.Component,new Set(["application/x-www-form-urlencoded","multipart/form-data","text/plain"]);const et=["onClick","relative","reloadDocument","replace","state","target","to","preventScrollReset","unstable_viewTransition"],tt=["aria-current","caseSensitive","className","end","style","to","unstable_viewTransition","children"];function nt(e){if(!e)return null;let t=Object.entries(e),n={};for(let[e,r]of t)if(r&&"RouteErrorResponse"===r.__type)n[e]=new F(r.status,r.statusText,r.data,!0===r.internal);else if(r&&"Error"===r.__type){if(r.__subType){let t=window[r.__subType];if("function"==typeof t)try{let a=new t(r.message);a.stack="",n[e]=a}catch(e){}}if(null==n[e]){let t=new Error(r.message);t.stack="",n[e]=t}}else n[e]=r;return n}const rt=n.createContext({isTransitioning:!1}),at=n.createContext(new Map),ot=r.startTransition;class lt{constructor(){this.status="pending",this.promise=new Promise(((e,t)=>{this.resolve=t=>{"pending"===this.status&&(this.status="resolved",e(t))},this.reject=e=>{"pending"===this.status&&(this.status="rejected",t(e))}}))}}function it(e){let{routes:t,state:n}=e;return Be(t,void 0,n)}const ut="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement,st=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,ct=n.forwardRef((function(e,t){let r,{onClick:a,relative:o,reloadDocument:l,replace:i,state:s,target:c,to:f,preventScrollReset:p,unstable_viewTransition:h}=e,m=Ze(e,et),{basename:v}=n.useContext(Re),g=!1;if("string"==typeof f&&st.test(f)&&(r=f,ut))try{let e=new URL(window.location.href),t=f.startsWith("//")?new URL(e.protocol+f):new URL(f),n=R(t.pathname,v);t.origin===e.origin&&null!=n?f=n+t.search+t.hash:g=!0}catch(e){}let y=function(e,t){let{relative:r}=void 0===t?{}:t;Me()||u(!1);let{basename:a,navigator:o}=n.useContext(Re),{hash:l,pathname:i,search:s}=Ie(e,{relative:r}),c=i;return"/"!==a&&(c="/"===i?a:M([a,i])),o.createHref({pathname:c,search:s,hash:l})}(f,{relative:o}),b=function(e,t){let{target:r,replace:a,state:o,preventScrollReset:l,relative:i,unstable_viewTransition:u}=void 0===t?{}:t,s=Ue(),c=Oe(),f=Ie(e,{relative:i});return n.useCallback((t=>{if(function(e,t){return!(0!==e.button||t&&"_self"!==t||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e))}(t,r)){t.preventDefault();let n=void 0!==a?a:d(c)===d(f);s(e,{replace:n,state:o,preventScrollReset:l,relative:i,unstable_viewTransition:u})}}),[c,s,f,a,o,r,e,l,i,u])}(f,{replace:i,state:s,target:c,preventScrollReset:p,relative:o,unstable_viewTransition:h});return n.createElement("a",Je({},m,{href:r||y,onClick:g||l?a:function(e){a&&a(e),e.defaultPrevented||b(e)},ref:t,target:c}))})),ft=n.forwardRef((function(e,t){let{"aria-current":r="page",caseSensitive:a=!1,className:o="",end:l=!1,style:i,to:s,unstable_viewTransition:c,children:f}=e,d=Ze(e,tt),p=Ie(s,{relative:d.relative}),h=Oe(),m=n.useContext(Te),{navigator:v}=n.useContext(Re),g=null!=m&&function(e,t){void 0===t&&(t={});let r=n.useContext(rt);null==r&&u(!1);let{basename:a}=function(e){let t=n.useContext(Le);return t||u(!1),t}(dt.useViewTransitionState),o=Ie(e,{relative:t.relative});if(!r.isTransitioning)return!1;let l=R(r.currentLocation.pathname,a)||r.currentLocation.pathname,i=R(r.nextLocation.pathname,a)||r.nextLocation.pathname;return null!=L(o.pathname,i)||null!=L(o.pathname,l)}(p)&&!0===c,y=v.encodeLocation?v.encodeLocation(p).pathname:p.pathname,b=h.pathname,w=m&&m.navigation&&m.navigation.location?m.navigation.location.pathname:null;a||(b=b.toLowerCase(),w=w?w.toLowerCase():null,y=y.toLowerCase());let k,S=b===y||!l&&b.startsWith(y)&&"/"===b.charAt(y.length),x=null!=w&&(w===y||!l&&w.startsWith(y)&&"/"===w.charAt(y.length)),C={isActive:S,isPending:x,isTransitioning:g},E=S?r:void 0;k="function"==typeof o?o(C):[o,S?"active":null,x?"pending":null,g?"transitioning":null].filter(Boolean).join(" ");let A="function"==typeof i?i(C):i;return n.createElement(ct,Je({},d,{"aria-current":E,className:k,ref:t,style:A,to:s,unstable_viewTransition:c}),"function"==typeof f?f(C):f)}));var dt,pt;(function(e){e.UseScrollRestoration="useScrollRestoration",e.UseSubmit="useSubmit",e.UseSubmitFetcher="useSubmitFetcher",e.UseFetcher="useFetcher",e.useViewTransitionState="useViewTransitionState"})(dt||(dt={})),function(e){e.UseFetcher="useFetcher",e.UseFetchers="useFetchers",e.UseScrollRestoration="useScrollRestoration"}(pt||(pt={}));const ht=function(e){var n=e.headerProps;return(0,t.jsxs)("header",{className:"header",children:[(0,t.jsx)("nav",{children:(0,t.jsx)(ct,{to:"/",children:"D"})}),(0,t.jsx)("ul",{className:"_container",children:n.map((function(e){var n=e.title,r=e.order,a=e.id;return(0,t.jsx)("li",{children:(0,t.jsx)(ft,{to:"/".concat(a),className:function(e){var t=e.isActive;return e.isPending?"pending":t?"active":""},children:n})},r)}))})]})},mt=function(){return(0,t.jsx)("footer",{children:"Footer"})},vt=function(){return(0,t.jsx)(t.Fragment,{children:(0,t.jsx)("main",{className:"wrapper",children:(0,t.jsx)("section",{children:(0,t.jsx)(Ge,{})})})})};function gt(e){return e&&e.includes("dummy")?e:"/dummyList"}var yt,bt=(0,n.lazy)((function(){return l.e(878).then(l.bind(l,878))})),wt=(0,n.lazy)((function(){return l.e(261).then(l.bind(l,261))})),kt=(0,n.lazy)((function(){return l.e(506).then(l.bind(l,506))})),St=(yt=[{path:"/",element:(0,t.jsx)((function(){var e=function(){let e=Ke(qe.UseLoaderData),t=Ye(qe.UseLoaderData);if(!e.errors||null==e.errors[t])return e.loaderData[t];console.error("You cannot `useLoaderData` in an errorElement (routeId: "+t+")")}().tabs,r=Oe().pathname,a=(0,n.useCallback)(gt,[]),l=e.map((function(e){return{order:e.order,title:e.title,id:e.id}})).sort((function(e,t){return e.order-t.order})),i=(0,n.useMemo)((function(){return l}),[l]);return(0,n.useEffect)((function(){var e=a(r);console.log(e,"useEf locationNeeded"),function(e,t){void 0===t&&(t=302);let n=t;"number"==typeof n?n={status:n}:void 0===n.status&&(n.status=302);let r=new Headers(n.headers);r.set("Location",e),new Response(null,o({},n,{headers:r}))}(e)}),[r]),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(ht,{headerProps:i}),(0,t.jsx)(vt,{}),(0,t.jsx)(mt,{})]})}),{}),loader:function(){return e=void 0,t=void 0,r=function(){return function(e,t){var n,r,a,o,l={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function i(i){return function(u){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,i[0]&&(l=0)),l;)try{if(n=1,r&&(a=2&i[0]?r.return:i[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,i[1])).done)return a;switch(r=0,a&&(i=[2&i[0],a.value]),i[0]){case 0:case 1:a=i;break;case 4:return l.label++,{value:i[1],done:!1};case 5:l.label++,r=i[1],i=[0];continue;case 7:i=l.ops.pop(),l.trys.pop();continue;default:if(!((a=(a=l.trys).length>0&&a[a.length-1])||6!==i[0]&&2!==i[0])){l=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){l.label=i[1];break}if(6===i[0]&&l.label<a[1]){l.label=a[1],a=i;break}if(a&&l.label<a[2]){l.label=a[2],l.ops.push(i);break}a[2]&&l.ops.pop(),l.trys.pop();continue}i=t.call(e,l)}catch(e){i=[6,e],r=0}finally{n=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}}(this,(function(e){switch(e.label){case 0:return[4,(o="/tabs.json",void 0===l&&(l="GET"),void 0===i&&(i=null),void 0===u&&(u={"Content-Type":"application/json"}),t=void 0,n=void 0,r=void 0,a=function(){var e;return function(e,t){var n,r,a,o,l={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function i(i){return function(u){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,i[0]&&(l=0)),l;)try{if(n=1,r&&(a=2&i[0]?r.return:i[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,i[1])).done)return a;switch(r=0,a&&(i=[2&i[0],a.value]),i[0]){case 0:case 1:a=i;break;case 4:return l.label++,{value:i[1],done:!1};case 5:l.label++,r=i[1],i=[0];continue;case 7:i=l.ops.pop(),l.trys.pop();continue;default:if(!((a=(a=l.trys).length>0&&a[a.length-1])||6!==i[0]&&2!==i[0])){l=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){l.label=i[1];break}if(6===i[0]&&l.label<a[1]){l.label=a[1],a=i;break}if(a&&l.label<a[2]){l.label=a[2],l.ops.push(i);break}a[2]&&l.ops.pop(),l.trys.pop();continue}i=t.call(e,l)}catch(e){i=[6,e],r=0}finally{n=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}}(this,(function(t){switch(t.label){case 0:return t.trys.push([0,3,,4]),[4,fetch(o,{method:l,body:i,headers:u})];case 1:if(!(e=t.sent()).ok)throw new Error("Could not fetch ".concat(o,", status: ").concat(e.status));return[4,e.json()];case 2:return[2,t.sent()];case 3:throw t.sent();case 4:return[2]}}))},new(r||(r=Promise))((function(e,o){function l(e){try{u(a.next(e))}catch(e){o(e)}}function i(e){try{u(a.throw(e))}catch(e){o(e)}}function u(t){var n;t.done?e(t.value):(n=t.value,n instanceof r?n:new r((function(e){e(n)}))).then(l,i)}u((a=a.apply(t,n||[])).next())})))];case 1:return[2,{tabs:e.sent()}]}var t,n,r,a,o,l,i,u}))},new((n=void 0)||(n=Promise))((function(a,o){function l(e){try{u(r.next(e))}catch(e){o(e)}}function i(e){try{u(r.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(l,i)}u((r=r.apply(e,t||[])).next())}));var e,t,n,r},children:[{path:"/dummyList",element:(0,t.jsx)(n.Suspense,{fallback:(0,t.jsx)("h1",{children:"Loading..."}),children:(0,t.jsx)(bt,{})})},{path:"/dummyChart",element:(0,t.jsx)(n.Suspense,{fallback:(0,t.jsx)("h1",{children:"Loading..."}),children:(0,t.jsx)(wt,{})})},{path:"/dummyTable",element:(0,t.jsx)(n.Suspense,{fallback:(0,t.jsx)("h1",{children:"Loading..."}),children:(0,t.jsx)(kt,{})})}]}],function(t){const n=t.window?t.window:"undefined"!=typeof window?window:void 0,r=void 0!==n&&void 0!==n.document&&void 0!==n.document.createElement,a=!r;let l;if(u(t.routes.length>0,"You must provide a non-empty routes array to createRouter"),t.mapRouteProperties)l=t.mapRouteProperties;else if(t.detectErrorBoundary){let e=t.detectErrorBoundary;l=t=>({hasErrorBoundary:e(t)})}else l=X;let i,c={},d=v(t.routes,l,void 0,c),p=t.basename||"/",m=o({v7_fetcherPersist:!1,v7_normalizeFormMethod:!1,v7_prependBasename:!1},t.future),y=null,b=new Set,w=null,k=null,S=null,x=null!=t.hydrationData,C=g(d,t.history.location,p),E=null;if(null==C){let e=pe(404,{pathname:t.history.location.pathname}),{matches:n,route:r}=de(d);C=n,E={[r.id]:e}}let A,_,P=!(C.some((e=>e.route.lazy))||C.some((e=>e.route.loader))&&null==t.hydrationData),L={historyAction:t.history.action,location:t.history.location,matches:C,initialized:P,navigation:q,restoreScrollPosition:null==t.hydrationData&&null,preventScrollReset:!1,revalidation:"idle",loaderData:t.hydrationData&&t.hydrationData.loaderData||{},actionData:t.hydrationData&&t.hydrationData.actionData||null,errors:t.hydrationData&&t.hydrationData.errors||E,fetchers:new Map,blockers:new Map},T=e.Pop,D=!1,z=!1,N=new Map,M=null,O=!1,j=!1,U=[],F=[],I=new Map,B=0,$=-1,W=new Map,V=new Set,H=new Map,ne=new Map,re=new Set,ae=new Map,ie=new Map,ue=!1;function me(e,t){L=o({},L,e);let n=[],r=[];m.v7_fetcherPersist&&L.fetchers.forEach(((e,t)=>{"idle"===e.state&&(re.has(t)?r.push(t):n.push(t))})),b.forEach((e=>e(L,{deletedFetchers:r,unstable_viewTransitionOpts:t}))),m.v7_fetcherPersist&&(n.forEach((e=>L.fetchers.delete(e))),r.forEach((e=>Ne(e))))}function Se(n,r){var a,l;let u,s=null!=L.actionData&&null!=L.navigation.formMethod&&be(L.navigation.formMethod)&&"loading"===L.navigation.state&&!0!==(null==(a=n.state)?void 0:a._isRedirect);u=r.actionData?Object.keys(r.actionData).length>0?r.actionData:null:s?L.actionData:null;let c=r.loaderData?ce(L.loaderData,r.loaderData,r.matches||[],r.errors):L.loaderData,f=L.blockers;f.size>0&&(f=new Map(f),f.forEach(((e,t)=>f.set(t,Y))));let p,h=!0===D||null!=L.navigation.formMethod&&be(L.navigation.formMethod)&&!0!==(null==(l=n.state)?void 0:l._isRedirect);if(i&&(d=i,i=void 0),O||T===e.Pop||(T===e.Push?t.history.push(n,n.state):T===e.Replace&&t.history.replace(n,n.state)),T===e.Pop){let e=N.get(L.location.pathname);e&&e.has(n.pathname)?p={currentLocation:L.location,nextLocation:n}:N.has(n.pathname)&&(p={currentLocation:n,nextLocation:L.location})}else if(z){let e=N.get(L.location.pathname);e?e.add(n.pathname):(e=new Set([n.pathname]),N.set(L.location.pathname,e)),p={currentLocation:L.location,nextLocation:n}}me(o({},r,{actionData:u,loaderData:c,historyAction:T,location:n,initialized:!0,navigation:q,revalidation:"idle",restoreScrollPosition:Ve(n,r.matches||L.matches),preventScrollReset:h,blockers:f}),p),T=e.Pop,D=!1,z=!1,O=!1,j=!1,U=[],F=[]}async function Pe(n,r,a){_&&_.abort(),_=null,T=n,O=!0===(a&&a.startUninterruptedRevalidation),function(e,t){if(w&&S){let n=We(e,t);w[n]=S()}}(L.location,L.matches),D=!0===(a&&a.preventScrollReset),z=!0===(a&&a.enableViewTransition);let u=i||d,s=a&&a.overrideNavigation,f=g(u,r,p);if(!f){let e=pe(404,{pathname:r.pathname}),{matches:t,route:n}=de(u);return $e(),void Se(r,{matches:t,loaderData:{},errors:{[n.id]:e}})}if(L.initialized&&!j&&(m=L.location,v=r,m.pathname===v.pathname&&m.search===v.search&&(""===m.hash?""!==v.hash:m.hash===v.hash||""!==v.hash))&&!(a&&a.submission&&be(a.submission.formMethod)))return void Se(r,{matches:f});var m,v;_=new AbortController;let y,b,k=le(t.history,r,_.signal,a&&a.submission);if(a&&a.pendingError)b={[fe(f).route.id]:a.pendingError};else if(a&&a.submission&&be(a.submission.formMethod)){let t=await async function(t,n,r,a,o){void 0===o&&(o={}),De();let i,u=function(e,t){return{state:"submitting",location:e,formMethod:t.formMethod,formAction:t.formAction,formEncType:t.formEncType,formData:t.formData,json:t.json,text:t.text}}(n,r);me({navigation:u});let s=xe(a,n);if(s.route.action||s.route.lazy){if(i=await oe("action",t,s,a,c,l,p),t.signal.aborted)return{shortCircuited:!0}}else i={type:h.error,error:pe(405,{method:t.method,pathname:n.pathname,routeId:s.route.id})};if(ye(i)){let e;return e=o&&null!=o.replace?o.replace:i.location===L.location.pathname+L.location.search,await Te(L,i,{submission:r,replace:e}),{shortCircuited:!0}}if(ge(i)){let t=fe(a,s.route.id);return!0!==(o&&o.replace)&&(T=e.Push),{pendingActionData:{},pendingActionError:{[t.route.id]:i.error}}}if(ve(i))throw pe(400,{type:"defer-action"});return{pendingActionData:{[s.route.id]:i.data}}}(k,r,a.submission,f,{replace:a.replace});if(t.shortCircuited)return;y=t.pendingActionData,b=t.pendingActionError,s=Ee(r,a.submission),k=new Request(k.url,{signal:k.signal})}let{shortCircuited:x,loaderData:C,errors:E}=await async function(e,n,r,a,l,u,s,c,f){let h=a||Ee(n,l),m=l||u||Ce(h),v=i||d,[g,y]=te(t.history,L,r,m,n,j,U,F,H,V,v,p,c,f);if($e((e=>!(r&&r.some((t=>t.route.id===e)))||g&&g.some((t=>t.route.id===e)))),$=++B,0===g.length&&0===y.length){let e=je();return Se(n,o({matches:r,loaderData:{},errors:f||null},c?{actionData:c}:{},e?{fetchers:new Map(L.fetchers)}:{})),{shortCircuited:!0}}if(!O){y.forEach((e=>{let t=L.fetchers.get(e.key),n=Ae(void 0,t?t.data:void 0);L.fetchers.set(e.key,n)}));let e=c||L.actionData;me(o({navigation:h},e?0===Object.keys(e).length?{actionData:null}:{actionData:e}:{},y.length>0?{fetchers:new Map(L.fetchers)}:{}))}y.forEach((e=>{I.has(e.key)&&Me(e.key),e.controller&&I.set(e.key,e.controller)}));let b=()=>y.forEach((e=>Me(e.key)));_&&_.signal.addEventListener("abort",b);let{results:w,loaderResults:k,fetcherResults:S}=await Re(L.matches,r,g,y,e);if(e.signal.aborted)return{shortCircuited:!0};_&&_.signal.removeEventListener("abort",b),y.forEach((e=>I.delete(e.key)));let x=he(w);if(x){if(x.idx>=g.length){let e=y[x.idx-g.length].key;V.add(e)}return await Te(L,x.result,{replace:s}),{shortCircuited:!0}}let{loaderData:C,errors:E}=se(L,r,g,k,f,y,S,ae);ae.forEach(((e,t)=>{e.subscribe((n=>{(n||e.done)&&ae.delete(t)}))}));let A=je(),P=Ue($);return o({loaderData:C,errors:E},A||P||y.length>0?{fetchers:new Map(L.fetchers)}:{})}(k,r,f,s,a&&a.submission,a&&a.fetcherSubmission,a&&a.replace,y,b);x||(_=null,Se(r,o({matches:f},y?{actionData:y}:{},{loaderData:C,errors:E})))}function Le(e){return m.v7_fetcherPersist&&(ne.set(e,(ne.get(e)||0)+1),re.has(e)&&re.delete(e)),L.fetchers.get(e)||K}async function Te(a,l,i){let{submission:s,fetcherSubmission:c,replace:d}=void 0===i?{}:i;l.revalidate&&(j=!0);let h=f(a.location,l.location,{_isRedirect:!0});if(u(h,"Expected a location on the redirect navigation"),r){let e=!1;if(l.reloadDocument)e=!0;else if(G.test(l.location)){const r=t.history.createURL(l.location);e=r.origin!==n.location.origin||null==R(r.pathname,p)}if(e)return void(d?n.location.replace(l.location):n.location.assign(l.location))}_=null;let m=!0===d?e.Replace:e.Push,{formMethod:v,formAction:g,formEncType:y}=a.navigation;!s&&!c&&v&&g&&y&&(s=Ce(a.navigation));let b=s||c;if(Q.has(l.status)&&b&&be(b.formMethod))await Pe(m,h,{submission:o({},b,{formAction:l.location}),preventScrollReset:D});else{let e=Ee(h,s);await Pe(m,h,{overrideNavigation:e,fetcherSubmission:c,preventScrollReset:D})}}async function Re(e,n,r,a,o){let i=await Promise.all([...r.map((e=>oe("loader",o,e,n,c,l,p))),...a.map((e=>e.matches&&e.match&&e.controller?oe("loader",le(t.history,e.path,e.controller.signal),e.match,e.matches,c,l,p):{type:h.error,error:pe(404,{pathname:e.path})}))]),u=i.slice(0,r.length),s=i.slice(r.length);return await Promise.all([we(e,r,u,u.map((()=>o.signal)),!1,L.loaderData),we(e,a.map((e=>e.match)),s,a.map((e=>e.controller?e.controller.signal:null)),!0)]),{results:i,loaderResults:u,fetcherResults:s}}function De(){j=!0,U.push(...$e()),H.forEach(((e,t)=>{I.has(t)&&(F.push(t),Me(t))}))}function ze(e,t,n){let r=fe(L.matches,t);Ne(e),me({errors:{[r.route.id]:n},fetchers:new Map(L.fetchers)})}function Ne(e){let t=L.fetchers.get(e);!I.has(e)||t&&"loading"===t.state&&W.has(e)||Me(e),H.delete(e),W.delete(e),V.delete(e),re.delete(e),L.fetchers.delete(e)}function Me(e){let t=I.get(e);u(t,"Expected fetch controller: "+e),t.abort(),I.delete(e)}function Oe(e){for(let t of e){let e=_e(Le(t).data);L.fetchers.set(t,e)}}function je(){let e=[],t=!1;for(let n of V){let r=L.fetchers.get(n);u(r,"Expected fetcher: "+n),"loading"===r.state&&(V.delete(n),e.push(n),t=!0)}return Oe(e),t}function Ue(e){let t=[];for(let[n,r]of W)if(r<e){let e=L.fetchers.get(n);u(e,"Expected fetcher: "+n),"loading"===e.state&&(Me(n),W.delete(n),t.push(n))}return Oe(t),t.length>0}function Fe(e){L.blockers.delete(e),ie.delete(e)}function Ie(e,t){let n=L.blockers.get(e)||Y;u("unblocked"===n.state&&"blocked"===t.state||"blocked"===n.state&&"blocked"===t.state||"blocked"===n.state&&"proceeding"===t.state||"blocked"===n.state&&"unblocked"===t.state||"proceeding"===n.state&&"unblocked"===t.state,"Invalid blocker state transition: "+n.state+" -> "+t.state);let r=new Map(L.blockers);r.set(e,t),me({blockers:r})}function Be(e){let{currentLocation:t,nextLocation:n,historyAction:r}=e;if(0===ie.size)return;ie.size>1&&s(!1,"A router only supports one blocker at a time");let a=Array.from(ie.entries()),[o,l]=a[a.length-1],i=L.blockers.get(o);return i&&"proceeding"===i.state?void 0:l({currentLocation:t,nextLocation:n,historyAction:r})?o:void 0}function $e(e){let t=[];return ae.forEach(((n,r)=>{e&&!e(r)||(n.cancel(),t.push(r),ae.delete(r))})),t}function We(e,t){return k&&k(e,t.map((e=>function(e,t){let{route:n,pathname:r,params:a}=e;return{id:n.id,pathname:r,params:a,data:t[n.id],handle:n.handle}}(e,L.loaderData))))||e.key}function Ve(e,t){if(w){let n=We(e,t),r=w[n];if("number"==typeof r)return r}return null}return A={get basename(){return p},get state(){return L},get routes(){return d},get window(){return n},initialize:function(){if(y=t.history.listen((e=>{let{action:n,location:r,delta:a}=e;if(ue)return void(ue=!1);s(0===ie.size||null!=a,"You are trying to use a blocker on a POP navigation to a location that was not created by @remix-run/router. This will fail silently in production. This can happen if you are navigating outside the router via `window.history.pushState`/`window.location.hash` instead of using router navigation APIs.  This can also happen if you are using createHashRouter and the user manually changes the URL.");let o=Be({currentLocation:L.location,nextLocation:r,historyAction:n});return o&&null!=a?(ue=!0,t.history.go(-1*a),void Ie(o,{state:"blocked",location:r,proceed(){Ie(o,{state:"proceeding",proceed:void 0,reset:void 0,location:r}),t.history.go(a)},reset(){let e=new Map(L.blockers);e.set(o,Y),me({blockers:e})}})):Pe(n,r)})),r){!function(e,t){try{let n=e.sessionStorage.getItem(J);if(n){let e=JSON.parse(n);for(let[n,r]of Object.entries(e||{}))r&&Array.isArray(r)&&t.set(n,new Set(r||[]))}}catch(e){}}(n,N);let e=()=>function(e,t){if(t.size>0){let n={};for(let[e,r]of t)n[e]=[...r];try{e.sessionStorage.setItem(J,JSON.stringify(n))}catch(e){s(!1,"Failed to save applied view transitions in sessionStorage ("+e+").")}}}(n,N);n.addEventListener("pagehide",e),M=()=>n.removeEventListener("pagehide",e)}return L.initialized||Pe(e.Pop,L.location),A},subscribe:function(e){return b.add(e),()=>b.delete(e)},enableScrollRestoration:function(e,t,n){if(w=e,S=t,k=n||null,!x&&L.navigation===q){x=!0;let e=Ve(L.location,L.matches);null!=e&&me({restoreScrollPosition:e})}return()=>{w=null,S=null,k=null}},navigate:async function n(r,a){if("number"==typeof r)return void t.history.go(r);let l=Z(L.location,L.matches,p,m.v7_prependBasename,r,null==a?void 0:a.fromRouteId,null==a?void 0:a.relative),{path:i,submission:u,error:s}=ee(m.v7_normalizeFormMethod,!1,l,a),c=L.location,d=f(L.location,i,a&&a.state);d=o({},d,t.history.encodeLocation(d));let h=a&&null!=a.replace?a.replace:void 0,v=e.Push;!0===h?v=e.Replace:!1===h||null!=u&&be(u.formMethod)&&u.formAction===L.location.pathname+L.location.search&&(v=e.Replace);let g=a&&"preventScrollReset"in a?!0===a.preventScrollReset:void 0,y=Be({currentLocation:c,nextLocation:d,historyAction:v});if(!y)return await Pe(v,d,{submission:u,pendingError:s,preventScrollReset:g,replace:a&&a.replace,enableViewTransition:a&&a.unstable_viewTransition});Ie(y,{state:"blocked",location:d,proceed(){Ie(y,{state:"proceeding",proceed:void 0,reset:void 0,location:d}),n(r,a)},reset(){let e=new Map(L.blockers);e.set(y,Y),me({blockers:e})}})},fetch:function(e,n,r,o){if(a)throw new Error("router.fetch() was called during the server render, but it shouldn't be. You are likely calling a useFetcher() method in the body of your component. Try moving it to a useEffect or a callback.");I.has(e)&&Me(e);let s=i||d,f=Z(L.location,L.matches,p,m.v7_prependBasename,r,n,null==o?void 0:o.relative),h=g(s,f,p);if(!h)return void ze(e,n,pe(404,{pathname:f}));let{path:v,submission:y,error:b}=ee(m.v7_normalizeFormMethod,!0,f,o);if(b)return void ze(e,n,b);let w=xe(h,v);D=!0===(o&&o.preventScrollReset),y&&be(y.formMethod)?async function(e,n,r,a,o,s){if(De(),H.delete(e),!a.route.action&&!a.route.lazy){let t=pe(405,{method:s.formMethod,pathname:r,routeId:n});return void ze(e,n,t)}let f=function(e,t){return{state:"submitting",formMethod:e.formMethod,formAction:e.formAction,formEncType:e.formEncType,formData:e.formData,json:e.json,text:e.text,data:t?t.data:void 0}}(s,L.fetchers.get(e));L.fetchers.set(e,f),me({fetchers:new Map(L.fetchers)});let h=new AbortController,m=le(t.history,r,h.signal,s);I.set(e,h);let v=B,y=await oe("action",m,a,o,c,l,p);if(m.signal.aborted)return void(I.get(e)===h&&I.delete(e));if(re.has(e))return L.fetchers.set(e,_e(void 0)),void me({fetchers:new Map(L.fetchers)});if(ye(y)){if(I.delete(e),$>v){let t=_e(void 0);return L.fetchers.set(e,t),void me({fetchers:new Map(L.fetchers)})}{V.add(e);let t=Ae(s);return L.fetchers.set(e,t),me({fetchers:new Map(L.fetchers)}),Te(L,y,{fetcherSubmission:s})}}if(ge(y))return void ze(e,n,y.error);if(ve(y))throw pe(400,{type:"defer-action"});let b=L.navigation.location||L.location,w=le(t.history,b,h.signal),k=i||d,S="idle"!==L.navigation.state?g(k,L.navigation.location,p):L.matches;u(S,"Didn't find any matches after fetcher action");let x=++B;W.set(e,x);let C=Ae(s,y.data);L.fetchers.set(e,C);let[E,A]=te(t.history,L,S,s,b,j,U,F,H,V,k,p,{[a.route.id]:y.data},void 0);A.filter((t=>t.key!==e)).forEach((e=>{let t=e.key,n=L.fetchers.get(t),r=Ae(void 0,n?n.data:void 0);L.fetchers.set(t,r),I.has(t)&&Me(t),e.controller&&I.set(t,e.controller)})),me({fetchers:new Map(L.fetchers)});let P=()=>A.forEach((e=>Me(e.key)));h.signal.addEventListener("abort",P);let{results:R,loaderResults:D,fetcherResults:z}=await Re(L.matches,S,E,A,w);if(h.signal.aborted)return;h.signal.removeEventListener("abort",P),W.delete(e),I.delete(e),A.forEach((e=>I.delete(e.key)));let N=he(R);if(N){if(N.idx>=E.length){let e=A[N.idx-E.length].key;V.add(e)}return Te(L,N.result)}let{loaderData:M,errors:O}=se(L,L.matches,E,D,void 0,A,z,ae);if(L.fetchers.has(e)){let t=_e(y.data);L.fetchers.set(e,t)}Ue(x),"loading"===L.navigation.state&&x>$?(u(T,"Expected pending action"),_&&_.abort(),Se(L.navigation.location,{matches:S,loaderData:M,errors:O,fetchers:new Map(L.fetchers)})):(me({errors:O,loaderData:ce(L.loaderData,M,S,O),fetchers:new Map(L.fetchers)}),j=!1)}(e,n,v,w,h,y):(H.set(e,{routeId:n,path:v}),async function(e,n,r,a,o,i){let s=L.fetchers.get(e),f=Ae(i,s?s.data:void 0);L.fetchers.set(e,f),me({fetchers:new Map(L.fetchers)});let d=new AbortController,h=le(t.history,r,d.signal);I.set(e,d);let m=B,v=await oe("loader",h,a,o,c,l,p);if(ve(v)&&(v=await ke(v,h.signal,!0)||v),I.get(e)===d&&I.delete(e),h.signal.aborted)return;if(re.has(e))return L.fetchers.set(e,_e(void 0)),void me({fetchers:new Map(L.fetchers)});if(ye(v)){if($>m){let t=_e(void 0);return L.fetchers.set(e,t),void me({fetchers:new Map(L.fetchers)})}return V.add(e),void await Te(L,v)}if(ge(v))return void ze(e,n,v.error);u(!ve(v),"Unhandled fetcher deferred data");let g=_e(v.data);L.fetchers.set(e,g),me({fetchers:new Map(L.fetchers)})}(e,n,v,w,h,y))},revalidate:function(){De(),me({revalidation:"loading"}),"submitting"!==L.navigation.state&&("idle"!==L.navigation.state?Pe(T||L.historyAction,L.navigation.location,{overrideNavigation:L.navigation}):Pe(L.historyAction,L.location,{startUninterruptedRevalidation:!0}))},createHref:e=>t.history.createHref(e),encodeLocation:e=>t.history.encodeLocation(e),getFetcher:Le,deleteFetcher:function(e){if(m.v7_fetcherPersist){let t=(ne.get(e)||0)-1;t<=0?(ne.delete(e),re.add(e)):ne.set(e,t)}else Ne(e);me({fetchers:new Map(L.fetchers)})},dispose:function(){y&&y(),M&&M(),b.clear(),_&&_.abort(),L.fetchers.forEach(((e,t)=>Ne(t))),L.blockers.forEach(((e,t)=>Fe(t)))},getBlocker:function(e,t){let n=L.blockers.get(e)||Y;return ie.get(e)!==t&&ie.set(e,t),n},deleteBlocker:Fe,_internalFetchControllers:I,_internalActiveDeferreds:ae,_internalSetRoutes:function(e){c={},i=v(e,l,void 0,c)}},A}({basename:void 0,future:Je({},void 0,{v7_prependBasename:!0}),history:function(t){return void 0===t&&(t={}),function(t,n,r,a){void 0===a&&(a={});let{window:l=document.defaultView,v5Compat:s=!1}=a,p=l.history,h=e.Pop,m=null,v=g();function g(){return(p.state||{idx:null}).idx}function y(){h=e.Pop;let t=g(),n=null==t?null:t-v;v=t,m&&m({action:h,location:w.location,delta:n})}function b(e){let t="null"!==l.location.origin?l.location.origin:l.location.href,n="string"==typeof e?e:d(e);return u(t,"No window.location.(origin|href) available to create URL for href: "+n),new URL(n,t)}null==v&&(v=0,p.replaceState(o({},p.state,{idx:v}),""));let w={get action(){return h},get location(){return t(l,p)},listen(e){if(m)throw new Error("A history only accepts one active listener");return l.addEventListener(i,y),m=e,()=>{l.removeEventListener(i,y),m=null}},createHref:e=>n(l,e),createURL:b,encodeLocation(e){let t=b(e);return{pathname:t.pathname,search:t.search,hash:t.hash}},push:function(t,n){h=e.Push;let a=f(w.location,t,n);r&&r(a,t),v=g()+1;let o=c(a,v),i=w.createHref(a);try{p.pushState(o,"",i)}catch(e){if(e instanceof DOMException&&"DataCloneError"===e.name)throw e;l.location.assign(i)}s&&m&&m({action:h,location:w.location,delta:1})},replace:function(t,n){h=e.Replace;let a=f(w.location,t,n);r&&r(a,t),v=g();let o=c(a,v),l=w.createHref(a);p.replaceState(o,"",l),s&&m&&m({action:h,location:w.location,delta:0})},go:e=>p.go(e)};return w}((function(e,t){let{pathname:n="/",search:r="",hash:a=""}=p(e.location.hash.substr(1));return n.startsWith("/")||n.startsWith(".")||(n="/"+n),f("",{pathname:n,search:r,hash:a},t.state&&t.state.usr||null,t.state&&t.state.key||"default")}),(function(e,t){let n=e.document.querySelector("base"),r="";if(n&&n.getAttribute("href")){let t=e.location.href,n=t.indexOf("#");r=-1===n?t:t.slice(0,n)}return r+"#"+("string"==typeof t?t:d(t))}),(function(e,t){s("/"===e.pathname.charAt(0),"relative pathnames are not supported in hash history.push("+JSON.stringify(t)+")")}),t)}({window:void 0}),hydrationData:function(){var e;let t=null==(e=window)?void 0:e.__staticRouterHydrationData;return t&&t.errors&&(t=Je({},t,{errors:nt(t.errors)})),t}(),routes:yt,mapRouteProperties:function(e){let t={hasErrorBoundary:null!=e.ErrorBoundary||null!=e.errorElement};return e.Component&&Object.assign(t,{element:n.createElement(e.Component),Component:void 0}),e.ErrorBoundary&&Object.assign(t,{errorElement:n.createElement(e.ErrorBoundary),ErrorBoundary:void 0}),t},window:void 0}).initialize()),xt=l(379),Ct=l.n(xt),Et=l(795),At=l.n(Et),_t=l(569),Pt=l.n(_t),Lt=l(565),Tt=l.n(Lt),Rt=l(216),Dt=l.n(Rt),zt=l(589),Nt=l.n(zt),Mt=l(364),Ot={};Ot.styleTagTransform=Nt(),Ot.setAttributes=Tt(),Ot.insert=Pt().bind(null,"head"),Ot.domAPI=At(),Ot.insertStyleElement=Dt(),Ct()(Mt.Z,Ot),Mt.Z&&Mt.Z.locals&&Mt.Z.locals,(0,a.s)(document.querySelector("#root")).render((0,t.jsx)(t.Fragment,{children:(0,t.jsx)(n.StrictMode,{children:(0,t.jsx)((function(e){let{fallbackElement:t,router:r,future:a}=e,[o,l]=n.useState(r.state),[i,u]=n.useState(),[s,c]=n.useState({isTransitioning:!1}),[f,d]=n.useState(),[p,h]=n.useState(),[m,v]=n.useState(),g=n.useRef(new Map),{v7_startTransition:y}=a||{},b=n.useCallback((e=>{y?function(e){ot?ot(e):e()}(e):e()}),[y]),w=n.useCallback(((e,t)=>{let{deletedFetchers:n,unstable_viewTransitionOpts:a}=t;n.forEach((e=>g.current.delete(e))),e.fetchers.forEach(((e,t)=>{void 0!==e.data&&g.current.set(t,e.data)})),a&&null!=r.window&&"function"==typeof r.window.document.startViewTransition?p&&f?(f.resolve(),p.skipTransition(),v({state:e,currentLocation:a.currentLocation,nextLocation:a.nextLocation})):(u(e),c({isTransitioning:!0,currentLocation:a.currentLocation,nextLocation:a.nextLocation})):b((()=>l(e)))}),[r.window,p,f,g,b]);n.useLayoutEffect((()=>r.subscribe(w)),[r,w]),n.useEffect((()=>{s.isTransitioning&&d(new lt)}),[s.isTransitioning]),n.useEffect((()=>{if(f&&i&&r.window){let e=i,t=f.promise,n=r.window.document.startViewTransition((async()=>{b((()=>l(e))),await t}));n.finished.finally((()=>{d(void 0),h(void 0),u(void 0),c({isTransitioning:!1})})),h(n)}}),[b,i,f,r.window]),n.useEffect((()=>{f&&i&&o.location.key===i.location.key&&f.resolve()}),[f,p,o.location,i]),n.useEffect((()=>{!s.isTransitioning&&m&&(u(m.state),c({isTransitioning:!0,currentLocation:m.currentLocation,nextLocation:m.nextLocation}),v(void 0))}),[s.isTransitioning,m]);let k=n.useMemo((()=>({createHref:r.createHref,encodeLocation:r.encodeLocation,go:e=>r.navigate(e),push:(e,t,n)=>r.navigate(e,{state:t,preventScrollReset:null==n?void 0:n.preventScrollReset}),replace:(e,t,n)=>r.navigate(e,{replace:!0,state:t,preventScrollReset:null==n?void 0:n.preventScrollReset})})),[r]),S=r.basename||"/",x=n.useMemo((()=>({router:r,navigator:k,static:!1,basename:S})),[r,k,S]);return n.createElement(n.Fragment,null,n.createElement(Le.Provider,{value:x},n.createElement(Te.Provider,{value:o},n.createElement(at.Provider,{value:g.current},n.createElement(rt.Provider,{value:s},n.createElement(Xe,{basename:S,location:o.location,navigationType:o.historyAction,navigator:k},o.initialized?n.createElement(it,{routes:r.routes,state:o}):t))))),null)}),{router:St})})}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,